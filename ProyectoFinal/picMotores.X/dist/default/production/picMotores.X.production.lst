

Microchip Technology PIC LITE Macro Assembler V1.41 build -162212810 
                                                                                               Tue May 30 15:48:53 2017

Microchip Technology Omniscient Code Generator v1.41 (Free mode) build 201701250102
     1                           	processor	16F887
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataCOMMON,global,class=CODE,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	dataCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	maintext,global,class=CODE,split=1,delta=2
    12                           	psect	text1,local,class=CODE,merge=1,delta=2
    13                           	psect	text2,local,class=CODE,merge=1,delta=2
    14                           	psect	text3,local,class=CODE,merge=1,delta=2
    15                           	psect	text4,local,class=CODE,merge=1,delta=2
    16                           	psect	text5,local,class=CODE,merge=1,delta=2
    17                           	psect	intentry,global,class=CODE,delta=2
    18                           	dabs	1,0x7E,2
    19  0000                     
    20                           ; Version 1.41
    21                           ; Generated 25/01/2017 GMT
    22                           ; 
    23                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    24                           ; All rights reserved.
    25                           ; 
    26                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    27                           ; 
    28                           ; Redistribution and use in source and binary forms, with or without modification, are
    29                           ; permitted provided that the following conditions are met:
    30                           ; 
    31                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    32                           ;        conditions and the following disclaimer.
    33                           ; 
    34                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    35                           ;        of conditions and the following disclaimer in the documentation and/or other
    36                           ;        materials provided with the distribution.
    37                           ; 
    38                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    39                           ;        software without specific prior written permission.
    40                           ; 
    41                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    42                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    43                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    44                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    45                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    46                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    47                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    48                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    49                           ; 
    50                           ; 
    51                           ; Code-generator required, PIC16F887 Definitions
    52                           ; 
    53                           ; SFR Addresses
    54  0000                     	;# 
    55  0001                     	;# 
    56  0002                     	;# 
    57  0003                     	;# 
    58  0004                     	;# 
    59  0005                     	;# 
    60  0006                     	;# 
    61  0007                     	;# 
    62  0008                     	;# 
    63  0009                     	;# 
    64  000A                     	;# 
    65  000B                     	;# 
    66  000C                     	;# 
    67  000D                     	;# 
    68  000E                     	;# 
    69  000E                     	;# 
    70  000F                     	;# 
    71  0010                     	;# 
    72  0011                     	;# 
    73  0012                     	;# 
    74  0013                     	;# 
    75  0014                     	;# 
    76  0015                     	;# 
    77  0015                     	;# 
    78  0016                     	;# 
    79  0017                     	;# 
    80  0018                     	;# 
    81  0019                     	;# 
    82  001A                     	;# 
    83  001B                     	;# 
    84  001B                     	;# 
    85  001C                     	;# 
    86  001D                     	;# 
    87  001E                     	;# 
    88  001F                     	;# 
    89  0081                     	;# 
    90  0085                     	;# 
    91  0086                     	;# 
    92  0087                     	;# 
    93  0088                     	;# 
    94  0089                     	;# 
    95  008C                     	;# 
    96  008D                     	;# 
    97  008E                     	;# 
    98  008F                     	;# 
    99  0090                     	;# 
   100  0091                     	;# 
   101  0092                     	;# 
   102  0093                     	;# 
   103  0093                     	;# 
   104  0093                     	;# 
   105  0094                     	;# 
   106  0095                     	;# 
   107  0096                     	;# 
   108  0097                     	;# 
   109  0098                     	;# 
   110  0099                     	;# 
   111  009A                     	;# 
   112  009B                     	;# 
   113  009C                     	;# 
   114  009D                     	;# 
   115  009E                     	;# 
   116  009F                     	;# 
   117  0105                     	;# 
   118  0107                     	;# 
   119  0108                     	;# 
   120  0109                     	;# 
   121  010C                     	;# 
   122  010C                     	;# 
   123  010D                     	;# 
   124  010E                     	;# 
   125  010F                     	;# 
   126  0185                     	;# 
   127  0187                     	;# 
   128  0188                     	;# 
   129  0189                     	;# 
   130  018C                     	;# 
   131  018D                     	;# 
   132                           
   133                           	psect	idataCOMMON
   134  01B9                     __pidataCOMMON:	
   135                           
   136                           ;initializer for _vel
   137  01B9  3464               	retlw	100
   138                           
   139                           ;initializer for _pos
   140  01BA  3414               	retlw	20
   141  0008                     _PORTD	set	8
   142  0013                     _SSPBUF	set	19
   143  0006                     _PORTBbits	set	6
   144  0014                     _SSPCON	set	20
   145  0012                     _T2CON	set	18
   146  001D                     _CCP2CON	set	29
   147  001F                     _ADCON0bits	set	31
   148  001E                     _ADRESH	set	30
   149  000C                     _PIR1bits	set	12
   150  001B                     _CCPR2L	set	27
   151  001D                     _CCP2CONbits	set	29
   152  0007                     _PORTCbits	set	7
   153  0015                     _CCPR1L	set	21
   154  0017                     _CCP1CONbits	set	23
   155  0017                     _CCP1CON	set	23
   156  0006                     _PORTB	set	6
   157  0094                     _SSPSTATbits	set	148
   158  0094                     _SSPSTAT	set	148
   159  0092                     _PR2	set	146
   160  0088                     _TRISD	set	136
   161  0087                     _TRISC	set	135
   162  0086                     _TRISB	set	134
   163  008F                     _OSCCON	set	143
   164  0189                     _ANSELH	set	393
   165  0188                     _ANSEL	set	392
   166                           
   167                           ; #config settings
   168  0000                     
   169                           	psect	cinit
   170  0015                     start_initialization:	
   171  0015                     __initialization:	
   172                           
   173                           ; Initialize objects allocated to COMMON
   174  0015  120A  118A  21B9  120A  118A  	fcall	__pidataCOMMON	;fetch initializer
   175  001A  00F8               	movwf	__pdataCOMMON& (0+127)
   176  001B  120A  118A  21BA   	fcall	__pidataCOMMON+1	;fetch initializer
   177  001E  00F9               	movwf	(__pdataCOMMON+1)& (0+127)
   178                           
   179                           ; Clear objects allocated to BANK0
   180  001F  01A5               	clrf	__pbssBANK0& (0+127)
   181                           
   182                           ; Clear objects allocated to COMMON
   183  0020  01F5               	clrf	__pbssCOMMON& (0+127)
   184  0021  01F6               	clrf	(__pbssCOMMON+1)& (0+127)
   185  0022  01F7               	clrf	(__pbssCOMMON+2)& (0+127)
   186  0023                     end_of_initialization:	
   187                           ;End of C runtime variable initialization code
   188                           
   189  0023                     __end_of__initialization:	
   190  0023  0183               	clrf	3
   191  0024  120A  118A  2827   	ljmp	_main	;jump to C main() function
   192                           
   193                           	psect	bssCOMMON
   194  0075                     __pbssCOMMON:	
   195  0075                     _accion:	
   196  0075                     	ds	1
   197  0076                     _giro:	
   198  0076                     	ds	1
   199  0077                     _puerta:	
   200  0077                     	ds	1
   201                           
   202                           	psect	dataCOMMON
   203  0078                     __pdataCOMMON:	
   204  0078                     _vel:	
   205  0078                     	ds	1
   206  0079                     _pos:	
   207  0079                     	ds	1
   208                           
   209                           	psect	bssBANK0
   210  0025                     __pbssBANK0:	
   211  0025                     _ADC:	
   212  0025                     	ds	1
   213                           
   214                           	psect	cstackCOMMON
   215  0070                     __pcstackCOMMON:	
   216  0070                     ?_stepper:	
   217  0070                     ?_move_pwmDC:	
   218                           ; 1 bytes @ 0x0
   219                           
   220  0070                     ?_servo:	
   221                           ; 1 bytes @ 0x0
   222                           
   223  0070                     ?_move_servo:	
   224                           ; 1 bytes @ 0x0
   225                           
   226  0070                     ?_ISR:	
   227                           ; 1 bytes @ 0x0
   228                           
   229  0070                     ??_ISR:	
   230                           ; 1 bytes @ 0x0
   231                           
   232  0070                     ?_main:	
   233                           ; 1 bytes @ 0x0
   234                           
   235                           
   236                           ; 1 bytes @ 0x0
   237  0070                     	ds	5
   238                           
   239                           	psect	cstackBANK0
   240  0020                     __pcstackBANK0:	
   241  0020                     ??_stepper:	
   242  0020                     ??_move_pwmDC:	
   243                           ; 1 bytes @ 0x0
   244                           
   245  0020                     ??_servo:	
   246                           ; 1 bytes @ 0x0
   247                           
   248                           
   249                           ; 1 bytes @ 0x0
   250  0020                     	ds	2
   251  0022                     ??_move_servo:	
   252  0022                     stepper@i:	
   253                           ; 1 bytes @ 0x2
   254                           
   255                           
   256                           ; 1 bytes @ 0x2
   257  0022                     	ds	2
   258  0024                     ??_main:	
   259                           
   260                           ; 1 bytes @ 0x4
   261  0024                     	ds	1
   262                           
   263                           	psect	maintext
   264  0027                     __pmaintext:	
   265 ;;
   266 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   267 ;;
   268 ;; *************** function _main *****************
   269 ;; Defined at:
   270 ;;		line 117 in file "picMotores.c"
   271 ;; Parameters:    Size  Location     Type
   272 ;;		None
   273 ;; Auto vars:     Size  Location     Type
   274 ;;		None
   275 ;; Return value:  Size  Location     Type
   276 ;;                  1    wreg      void 
   277 ;; Registers used:
   278 ;;		wreg, status,2, status,0, pclath, cstack
   279 ;; Tracked objects:
   280 ;;		On entry : B00/0
   281 ;;		On exit  : 0/0
   282 ;;		Unchanged: 0/0
   283 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   284 ;;      Params:         0       0       0       0       0
   285 ;;      Locals:         0       0       0       0       0
   286 ;;      Temps:          0       1       0       0       0
   287 ;;      Totals:         0       1       0       0       0
   288 ;;Total ram usage:        1 bytes
   289 ;; Hardware stack levels required when called:    3
   290 ;; This function calls:
   291 ;;		_move_pwmDC
   292 ;;		_move_servo
   293 ;;		_servo
   294 ;;		_stepper
   295 ;; This function is called by:
   296 ;;		Startup code after reset
   297 ;; This function uses a non-reentrant model
   298 ;;
   299                           
   300                           
   301                           ;psect for function _main
   302  0027                     _main:	
   303                           
   304                           ;picMotores.c: 119: OSCCON = 0b00111100;
   305                           
   306                           ;incstack = 0
   307                           ; Regs used in _main: [wreg+status,2+status,0+pclath+cstack]
   308  0027  303C               	movlw	60
   309  0028  1683               	bsf	3,5	;RP0=1, select bank1
   310  0029  1303               	bcf	3,6	;RP1=0, select bank1
   311  002A  008F               	movwf	15	;volatile
   312                           
   313                           ;picMotores.c: 122: ANSEL=0;
   314  002B  1683               	bsf	3,5	;RP0=1, select bank3
   315  002C  1703               	bsf	3,6	;RP1=1, select bank3
   316  002D  0188               	clrf	8	;volatile
   317                           
   318                           ;picMotores.c: 123: ANSELH=0;
   319  002E  0189               	clrf	9	;volatile
   320                           
   321                           ;picMotores.c: 126: TRISB=0b11110000;
   322  002F  30F0               	movlw	240
   323  0030  1683               	bsf	3,5	;RP0=1, select bank1
   324  0031  1303               	bcf	3,6	;RP1=0, select bank1
   325  0032  0086               	movwf	6	;volatile
   326                           
   327                           ;picMotores.c: 127: TRISC=0b11011001;
   328  0033  30D9               	movlw	217
   329  0034  0087               	movwf	7	;volatile
   330                           
   331                           ;picMotores.c: 128: TRISD=0;
   332  0035  0188               	clrf	8	;volatile
   333                           
   334                           ;picMotores.c: 131: PORTB=0b1001;
   335  0036  3009               	movlw	9
   336  0037  1283               	bcf	3,5	;RP0=0, select bank0
   337  0038  1303               	bcf	3,6	;RP1=0, select bank0
   338  0039  0086               	movwf	6	;volatile
   339                           
   340                           ;picMotores.c: 132: PORTCbits.RC2=0;
   341  003A  1107               	bcf	7,2	;volatile
   342                           
   343                           ;picMotores.c: 133: PORTCbits.RC1=0;
   344  003B  1087               	bcf	7,1	;volatile
   345                           
   346                           ;picMotores.c: 136: CCP2CON=0b00001111;
   347  003C  300F               	movlw	15
   348  003D  009D               	movwf	29	;volatile
   349                           
   350                           ;picMotores.c: 137: servo();
   351  003E  120A  118A  217D  120A  118A  	fcall	_servo
   352                           
   353                           ;picMotores.c: 139: PR2=155;
   354  0043  309B               	movlw	155
   355  0044  1683               	bsf	3,5	;RP0=1, select bank1
   356  0045  1303               	bcf	3,6	;RP1=0, select bank1
   357  0046  0092               	movwf	18	;volatile
   358                           
   359                           ;picMotores.c: 140: T2CON = 0b00000111;
   360  0047  3007               	movlw	7
   361  0048  1283               	bcf	3,5	;RP0=0, select bank0
   362  0049  1303               	bcf	3,6	;RP1=0, select bank0
   363  004A  0092               	movwf	18	;volatile
   364                           
   365                           ;picMotores.c: 141: PIR1bits.TMR2IF = 0;
   366  004B  108C               	bcf	12,1	;volatile
   367                           
   368                           ;picMotores.c: 145: SSPSTAT=0b01000000;
   369  004C  3040               	movlw	64
   370  004D  1683               	bsf	3,5	;RP0=1, select bank1
   371  004E  1303               	bcf	3,6	;RP1=0, select bank1
   372  004F  0094               	movwf	20	;volatile
   373                           
   374                           ;picMotores.c: 147: SSPCON=0b00110100;
   375  0050  3034               	movlw	52
   376  0051  1283               	bcf	3,5	;RP0=0, select bank0
   377  0052  1303               	bcf	3,6	;RP1=0, select bank0
   378  0053  0094               	movwf	20	;volatile
   379                           
   380                           ;picMotores.c: 170: giro=0;
   381  0054  01F6               	clrf	_giro
   382  0055                     l934:	
   383                           ;picMotores.c: 172: while(1){
   384                           
   385                           
   386                           ;picMotores.c: 174: if (PORTBbits.RB4==1|accion==1){
   387  0055  1283               	bcf	3,5	;RP0=0, select bank0
   388  0056  1A06               	btfsc	6,4	;volatile
   389  0057  285D               	goto	l940
   390  0058  0375               	decf	_accion,w
   391  0059  1903               	btfsc	3,2
   392  005A  285D               	goto	l940
   393  005B  2867               	goto	l948
   394  005C                     l938:	
   395                           ;picMotores.c: 175: while (PORTBbits.RB4==1){
   396                           
   397                           
   398                           ;picMotores.c: 176: PORTBbits.RB4==1;
   399  005C  0806               	movf	6,w	;volatile
   400  005D                     l940:	
   401  005D  1A06               	btfsc	6,4	;volatile
   402  005E  285C               	goto	l938
   403                           
   404                           ;picMotores.c: 177: }
   405                           ;picMotores.c: 178: stepper();
   406  005F  120A  118A  20BB  120A  118A  	fcall	_stepper
   407                           
   408                           ;picMotores.c: 179: if (accion==1){accion=0;}
   409  0064  0375               	decf	_accion,w
   410  0065  1903               	btfsc	3,2
   411  0066  01F5               	clrf	_accion
   412  0067                     l948:	
   413                           
   414                           ;picMotores.c: 180: }
   415                           ;picMotores.c: 182: if (PORTBbits.RB7==1|accion==2){
   416  0067  1283               	bcf	3,5	;RP0=0, select bank0
   417  0068  1303               	bcf	3,6	;RP1=0, select bank0
   418  0069  1B86               	btfsc	6,7	;volatile
   419  006A  286F               	goto	l104
   420  006B  3002               	movlw	2
   421  006C  0675               	xorwf	_accion,w
   422  006D  1D03               	btfss	3,2
   423  006E  287A               	goto	l958
   424  006F                     l104:	
   425                           ;picMotores.c: 183: while (PORTBbits.RB7==1){}
   426                           
   427  006F  1B86               	btfsc	6,7	;volatile
   428  0070  286F               	goto	l104
   429                           
   430                           ;picMotores.c: 184: move_pwmDC();
   431  0071  120A  118A  2149  120A  118A  	fcall	_move_pwmDC
   432                           
   433                           ;picMotores.c: 185: if (accion==2){accion=0;}
   434  0076  3002               	movlw	2
   435  0077  0675               	xorwf	_accion,w
   436  0078  1903               	btfsc	3,2
   437  0079  01F5               	clrf	_accion
   438  007A                     l958:	
   439                           
   440                           ;picMotores.c: 186: }
   441                           ;picMotores.c: 188: if (PORTBbits.RB5==1| (accion==3&pos==20)){
   442  007A  1283               	bcf	3,5	;RP0=0, select bank0
   443  007B  1303               	bcf	3,6	;RP1=0, select bank0
   444  007C  1A86               	btfsc	6,5	;volatile
   445  007D  2886               	goto	l111
   446  007E  3003               	movlw	3
   447  007F  0675               	xorwf	_accion,w
   448  0080  1D03               	btfss	3,2
   449  0081  288E               	goto	l968
   450  0082  3014               	movlw	20
   451  0083  0679               	xorwf	_pos,w
   452  0084  1D03               	btfss	3,2
   453  0085  288E               	goto	l968
   454  0086                     l111:	
   455                           ;picMotores.c: 189: while (PORTBbits.RB5==1){}
   456                           
   457  0086  1A86               	btfsc	6,5	;volatile
   458  0087  2886               	goto	l111
   459                           
   460                           ;picMotores.c: 190: giro=1;
   461  0088  01F6               	clrf	_giro
   462  0089  0AF6               	incf	_giro,f
   463                           
   464                           ;picMotores.c: 191: if (accion==3){accion=0;}
   465  008A  3003               	movlw	3
   466  008B  0675               	xorwf	_accion,w
   467  008C  1903               	btfsc	3,2
   468  008D  01F5               	clrf	_accion
   469  008E                     l968:	
   470                           
   471                           ;picMotores.c: 192: }
   472                           ;picMotores.c: 194: if (PORTBbits.RB6==1| (accion==3&pos==77)){
   473  008E  1B06               	btfsc	6,6	;volatile
   474  008F  2898               	goto	l118
   475  0090  3003               	movlw	3
   476  0091  0675               	xorwf	_accion,w
   477  0092  1D03               	btfss	3,2
   478  0093  28A2               	goto	l980
   479  0094  304D               	movlw	77
   480  0095  0679               	xorwf	_pos,w
   481  0096  1D03               	btfss	3,2
   482  0097  28A2               	goto	l980
   483  0098                     l118:	
   484                           ;picMotores.c: 195: while (PORTBbits.RB6==1){}
   485                           
   486  0098  1B06               	btfsc	6,6	;volatile
   487  0099  2898               	goto	l118
   488                           
   489                           ;picMotores.c: 196: giro=2;
   490  009A  3002               	movlw	2
   491  009B  00A4               	movwf	??_main
   492  009C  0824               	movf	??_main,w
   493  009D  00F6               	movwf	_giro
   494                           
   495                           ;picMotores.c: 197: if (accion==3){accion=0;}
   496  009E  3003               	movlw	3
   497  009F  0675               	xorwf	_accion,w
   498  00A0  1903               	btfsc	3,2
   499  00A1  01F5               	clrf	_accion
   500  00A2                     l980:	
   501                           
   502                           ;picMotores.c: 198: }
   503                           ;picMotores.c: 200: if (giro==1|giro==2){
   504  00A2  0376               	decf	_giro,w
   505  00A3  1903               	btfsc	3,2
   506  00A4  28A9               	goto	l984
   507  00A5  3002               	movlw	2
   508  00A6  0676               	xorwf	_giro,w
   509  00A7  1D03               	btfss	3,2
   510  00A8  28AE               	goto	l986
   511  00A9                     l984:	
   512                           
   513                           ;picMotores.c: 201: move_servo();
   514  00A9  120A  118A  2103  120A  118A  	fcall	_move_servo
   515  00AE                     l986:	
   516                           
   517                           ;picMotores.c: 202: }
   518                           ;picMotores.c: 204: if (SSPSTATbits.BF==1){
   519  00AE  1683               	bsf	3,5	;RP0=1, select bank1
   520  00AF  1303               	bcf	3,6	;RP1=0, select bank1
   521  00B0  1C14               	btfss	20,0	;volatile
   522  00B1  2855               	goto	l934
   523                           
   524                           ;picMotores.c: 205: accion=SSPBUF;
   525  00B2  1283               	bcf	3,5	;RP0=0, select bank0
   526  00B3  1303               	bcf	3,6	;RP1=0, select bank0
   527  00B4  0813               	movf	19,w	;volatile
   528  00B5  00A4               	movwf	??_main
   529  00B6  0824               	movf	??_main,w
   530  00B7  00F5               	movwf	_accion
   531                           
   532                           ;picMotores.c: 206: PORTD=accion;
   533  00B8  0875               	movf	_accion,w
   534  00B9  0088               	movwf	8	;volatile
   535  00BA  2855               	goto	l934
   536  00BB                     __end_of_main:	
   537                           
   538                           	psect	text1
   539  00BB                     __ptext1:	
   540 ;; *************** function _stepper *****************
   541 ;; Defined at:
   542 ;;		line 29 in file "picMotores.c"
   543 ;; Parameters:    Size  Location     Type
   544 ;;		None
   545 ;; Auto vars:     Size  Location     Type
   546 ;;  i               1    2[BANK0 ] unsigned char 
   547 ;; Return value:  Size  Location     Type
   548 ;;                  1    wreg      void 
   549 ;; Registers used:
   550 ;;		wreg, status,2, status,0
   551 ;; Tracked objects:
   552 ;;		On entry : 0/0
   553 ;;		On exit  : 0/0
   554 ;;		Unchanged: 0/0
   555 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   556 ;;      Params:         0       0       0       0       0
   557 ;;      Locals:         0       1       0       0       0
   558 ;;      Temps:          0       2       0       0       0
   559 ;;      Totals:         0       3       0       0       0
   560 ;;Total ram usage:        3 bytes
   561 ;; Hardware stack levels used:    1
   562 ;; Hardware stack levels required when called:    1
   563 ;; This function calls:
   564 ;;		Nothing
   565 ;; This function is called by:
   566 ;;		_main
   567 ;; This function uses a non-reentrant model
   568 ;;
   569                           
   570                           
   571                           ;psect for function _stepper
   572  00BB                     _stepper:	
   573                           
   574                           ;picMotores.c: 30: char i=3;
   575                           
   576                           ;incstack = 0
   577                           ; Regs used in _stepper: [wreg+status,2+status,0]
   578  00BB  3003               	movlw	3
   579  00BC  1283               	bcf	3,5	;RP0=0, select bank0
   580  00BD  1303               	bcf	3,6	;RP1=0, select bank0
   581  00BE  00A0               	movwf	??_stepper
   582  00BF  0820               	movf	??_stepper,w
   583  00C0  00A2               	movwf	stepper@i
   584  00C1                     l856:	
   585                           ;picMotores.c: 31: while (i!=0){
   586                           
   587  00C1  0822               	movf	stepper@i,w
   588  00C2  1903               	btfsc	3,2
   589  00C3  0008               	return
   590                           
   591                           ;picMotores.c: 32: PORTB=0b0011;
   592  00C4  3003               	movlw	3
   593  00C5  0086               	movwf	6	;volatile
   594                           
   595                           ;picMotores.c: 33: _delay((unsigned long)((200)*(500000/4000.0)));
   596  00C6  3021               	movlw	33
   597  00C7  1283               	bcf	3,5	;RP0=0, select bank0
   598  00C8  1303               	bcf	3,6	;RP1=0, select bank0
   599  00C9  00A1               	movwf	??_stepper+1
   600  00CA  3075               	movlw	117
   601  00CB  00A0               	movwf	??_stepper
   602  00CC                     u807:	
   603  00CC  0BA0               	decfsz	??_stepper,f
   604  00CD  28CC               	goto	u807
   605  00CE  0BA1               	decfsz	??_stepper+1,f
   606  00CF  28CC               	goto	u807
   607  00D0  28D1               	nop2
   608                           
   609                           ;picMotores.c: 34: PORTB=0b0110;
   610  00D1  3006               	movlw	6
   611  00D2  1283               	bcf	3,5	;RP0=0, select bank0
   612  00D3  1303               	bcf	3,6	;RP1=0, select bank0
   613  00D4  0086               	movwf	6	;volatile
   614                           
   615                           ;picMotores.c: 35: _delay((unsigned long)((200)*(500000/4000.0)));
   616  00D5  3021               	movlw	33
   617  00D6  1283               	bcf	3,5	;RP0=0, select bank0
   618  00D7  1303               	bcf	3,6	;RP1=0, select bank0
   619  00D8  00A1               	movwf	??_stepper+1
   620  00D9  3075               	movlw	117
   621  00DA  00A0               	movwf	??_stepper
   622  00DB                     u817:	
   623  00DB  0BA0               	decfsz	??_stepper,f
   624  00DC  28DB               	goto	u817
   625  00DD  0BA1               	decfsz	??_stepper+1,f
   626  00DE  28DB               	goto	u817
   627  00DF  28E0               	nop2
   628                           
   629                           ;picMotores.c: 36: PORTB=0b1100;
   630  00E0  300C               	movlw	12
   631  00E1  1283               	bcf	3,5	;RP0=0, select bank0
   632  00E2  1303               	bcf	3,6	;RP1=0, select bank0
   633  00E3  0086               	movwf	6	;volatile
   634                           
   635                           ;picMotores.c: 37: _delay((unsigned long)((200)*(500000/4000.0)));
   636  00E4  3021               	movlw	33
   637  00E5  1283               	bcf	3,5	;RP0=0, select bank0
   638  00E6  1303               	bcf	3,6	;RP1=0, select bank0
   639  00E7  00A1               	movwf	??_stepper+1
   640  00E8  3075               	movlw	117
   641  00E9  00A0               	movwf	??_stepper
   642  00EA                     u827:	
   643  00EA  0BA0               	decfsz	??_stepper,f
   644  00EB  28EA               	goto	u827
   645  00EC  0BA1               	decfsz	??_stepper+1,f
   646  00ED  28EA               	goto	u827
   647  00EE  28EF               	nop2
   648                           
   649                           ;picMotores.c: 38: PORTB=0b1001;
   650  00EF  3009               	movlw	9
   651  00F0  1283               	bcf	3,5	;RP0=0, select bank0
   652  00F1  1303               	bcf	3,6	;RP1=0, select bank0
   653  00F2  0086               	movwf	6	;volatile
   654                           
   655                           ;picMotores.c: 39: _delay((unsigned long)((200)*(500000/4000.0)));
   656  00F3  3021               	movlw	33
   657  00F4  1283               	bcf	3,5	;RP0=0, select bank0
   658  00F5  1303               	bcf	3,6	;RP1=0, select bank0
   659  00F6  00A1               	movwf	??_stepper+1
   660  00F7  3075               	movlw	117
   661  00F8  00A0               	movwf	??_stepper
   662  00F9                     u837:	
   663  00F9  0BA0               	decfsz	??_stepper,f
   664  00FA  28F9               	goto	u837
   665  00FB  0BA1               	decfsz	??_stepper+1,f
   666  00FC  28F9               	goto	u837
   667  00FD  28FE               	nop2
   668                           
   669                           ;picMotores.c: 40: i--;
   670  00FE  3001               	movlw	1
   671  00FF  1283               	bcf	3,5	;RP0=0, select bank0
   672  0100  1303               	bcf	3,6	;RP1=0, select bank0
   673  0101  02A2               	subwf	stepper@i,f
   674  0102  28C1               	goto	l856
   675  0103                     __end_of_stepper:	
   676                           ;picMotores.c: 41: }
   677                           ;picMotores.c: 43: return;
   678                           
   679                           
   680                           	psect	text2
   681  0103                     __ptext2:	
   682 ;; *************** function _move_servo *****************
   683 ;; Defined at:
   684 ;;		line 84 in file "picMotores.c"
   685 ;; Parameters:    Size  Location     Type
   686 ;;		None
   687 ;; Auto vars:     Size  Location     Type
   688 ;;		None
   689 ;; Return value:  Size  Location     Type
   690 ;;                  1    wreg      void 
   691 ;; Registers used:
   692 ;;		wreg, status,2, status,0, pclath, cstack
   693 ;; Tracked objects:
   694 ;;		On entry : 0/0
   695 ;;		On exit  : 0/0
   696 ;;		Unchanged: 0/0
   697 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   698 ;;      Params:         0       0       0       0       0
   699 ;;      Locals:         0       0       0       0       0
   700 ;;      Temps:          0       2       0       0       0
   701 ;;      Totals:         0       2       0       0       0
   702 ;;Total ram usage:        2 bytes
   703 ;; Hardware stack levels used:    1
   704 ;; Hardware stack levels required when called:    2
   705 ;; This function calls:
   706 ;;		_servo
   707 ;; This function is called by:
   708 ;;		_main
   709 ;; This function uses a non-reentrant model
   710 ;;
   711                           
   712                           
   713                           ;psect for function _move_servo
   714  0103                     _move_servo:	
   715                           
   716                           ;picMotores.c: 85: if (giro==1){
   717                           
   718                           ;incstack = 0
   719                           ; Regs used in _move_servo: [wreg+status,2+status,0+pclath+cstack]
   720  0103  0376               	decf	_giro,w
   721  0104  1D03               	btfss	3,2
   722  0105  2927               	goto	l888
   723                           
   724                           ;picMotores.c: 86: pos++;
   725  0106  3001               	movlw	1
   726  0107  1283               	bcf	3,5	;RP0=0, select bank0
   727  0108  1303               	bcf	3,6	;RP1=0, select bank0
   728  0109  00A2               	movwf	??_move_servo
   729  010A  0822               	movf	??_move_servo,w
   730  010B  07F9               	addwf	_pos,f
   731                           
   732                           ;picMotores.c: 87: servo();
   733  010C  120A  118A  217D  120A  118A  	fcall	_servo
   734                           
   735                           ;picMotores.c: 88: _delay((unsigned long)((100)*(500000/4000.0)));
   736  0111  3011               	movlw	17
   737  0112  1283               	bcf	3,5	;RP0=0, select bank0
   738  0113  1303               	bcf	3,6	;RP1=0, select bank0
   739  0114  00A3               	movwf	??_move_servo+1
   740  0115  3039               	movlw	57
   741  0116  00A2               	movwf	??_move_servo
   742  0117                     u847:	
   743  0117  0BA2               	decfsz	??_move_servo,f
   744  0118  2917               	goto	u847
   745  0119  0BA3               	decfsz	??_move_servo+1,f
   746  011A  2917               	goto	u847
   747  011B  291C               	nop2
   748                           
   749                           ;picMotores.c: 89: if(pos==78){
   750  011C  304E               	movlw	78
   751  011D  0679               	xorwf	_pos,w
   752  011E  1D03               	btfss	3,2
   753  011F  2927               	goto	l888
   754                           
   755                           ;picMotores.c: 90: giro=0;
   756  0120  01F6               	clrf	_giro
   757                           
   758                           ;picMotores.c: 91: pos=77;
   759  0121  304D               	movlw	77
   760  0122  1283               	bcf	3,5	;RP0=0, select bank0
   761  0123  1303               	bcf	3,6	;RP1=0, select bank0
   762  0124  00A2               	movwf	??_move_servo
   763  0125  0822               	movf	??_move_servo,w
   764  0126  00F9               	movwf	_pos
   765  0127                     l888:	
   766                           
   767                           ;picMotores.c: 92: }
   768                           ;picMotores.c: 93: }
   769                           ;picMotores.c: 94: if (giro==2){
   770  0127  3002               	movlw	2
   771  0128  0676               	xorwf	_giro,w
   772  0129  1D03               	btfss	3,2
   773  012A  0008               	return
   774                           
   775                           ;picMotores.c: 95: pos--;
   776  012B  3001               	movlw	1
   777  012C  02F9               	subwf	_pos,f
   778                           
   779                           ;picMotores.c: 96: servo();
   780  012D  120A  118A  217D  120A  118A  	fcall	_servo
   781                           
   782                           ;picMotores.c: 97: _delay((unsigned long)((100)*(500000/4000.0)));
   783  0132  3011               	movlw	17
   784  0133  1283               	bcf	3,5	;RP0=0, select bank0
   785  0134  1303               	bcf	3,6	;RP1=0, select bank0
   786  0135  00A3               	movwf	??_move_servo+1
   787  0136  3039               	movlw	57
   788  0137  00A2               	movwf	??_move_servo
   789  0138                     u857:	
   790  0138  0BA2               	decfsz	??_move_servo,f
   791  0139  2938               	goto	u857
   792  013A  0BA3               	decfsz	??_move_servo+1,f
   793  013B  2938               	goto	u857
   794  013C  293D               	nop2
   795                           
   796                           ;picMotores.c: 98: if(pos==19){
   797  013D  3013               	movlw	19
   798  013E  0679               	xorwf	_pos,w
   799  013F  1D03               	btfss	3,2
   800  0140  0008               	return
   801                           
   802                           ;picMotores.c: 99: giro=0;
   803  0141  01F6               	clrf	_giro
   804                           
   805                           ;picMotores.c: 100: pos=20;
   806  0142  3014               	movlw	20
   807  0143  1283               	bcf	3,5	;RP0=0, select bank0
   808  0144  1303               	bcf	3,6	;RP1=0, select bank0
   809  0145  00A2               	movwf	??_move_servo
   810  0146  0822               	movf	??_move_servo,w
   811  0147  00F9               	movwf	_pos
   812  0148  0008               	return
   813  0149                     __end_of_move_servo:	
   814                           ;picMotores.c: 101: }
   815                           ;picMotores.c: 102: }
   816                           ;picMotores.c: 103: return;
   817                           
   818                           
   819                           	psect	text3
   820  017D                     __ptext3:	
   821 ;; *************** function _servo *****************
   822 ;; Defined at:
   823 ;;		line 77 in file "picMotores.c"
   824 ;; Parameters:    Size  Location     Type
   825 ;;		None
   826 ;; Auto vars:     Size  Location     Type
   827 ;;		None
   828 ;; Return value:  Size  Location     Type
   829 ;;                  1    wreg      void 
   830 ;; Registers used:
   831 ;;		wreg, status,2, status,0
   832 ;; Tracked objects:
   833 ;;		On entry : 0/0
   834 ;;		On exit  : 0/0
   835 ;;		Unchanged: 0/0
   836 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   837 ;;      Params:         0       0       0       0       0
   838 ;;      Locals:         0       0       0       0       0
   839 ;;      Temps:          0       2       0       0       0
   840 ;;      Totals:         0       2       0       0       0
   841 ;;Total ram usage:        2 bytes
   842 ;; Hardware stack levels used:    1
   843 ;; Hardware stack levels required when called:    1
   844 ;; This function calls:
   845 ;;		Nothing
   846 ;; This function is called by:
   847 ;;		_move_servo
   848 ;;		_main
   849 ;; This function uses a non-reentrant model
   850 ;;
   851                           
   852                           
   853                           ;psect for function _servo
   854  017D                     _servo:	
   855                           
   856                           ;picMotores.c: 78: CCP2CONbits.DC2B0=(pos)&(0b1);
   857                           
   858                           ;incstack = 0
   859                           ; Regs used in _servo: [wreg+status,2+status,0]
   860  017D  0879               	movf	_pos,w
   861  017E  3901               	andlw	1
   862  017F  1283               	bcf	3,5	;RP0=0, select bank0
   863  0180  1303               	bcf	3,6	;RP1=0, select bank0
   864  0181  00A0               	movwf	??_servo
   865  0182  0EA0               	swapf	??_servo,f
   866  0183  081D               	movf	29,w	;volatile
   867  0184  0620               	xorwf	??_servo,w
   868  0185  39EF               	andlw	-17
   869  0186  0620               	xorwf	??_servo,w
   870  0187  009D               	movwf	29	;volatile
   871                           
   872                           ;picMotores.c: 79: CCP2CONbits.DC2B1=(pos>>1)&(0b1);
   873  0188  0879               	movf	_pos,w
   874  0189  00A0               	movwf	??_servo
   875  018A  1003               	clrc
   876  018B  0C20               	rrf	??_servo,w
   877  018C  3901               	andlw	1
   878  018D  00A1               	movwf	??_servo+1
   879  018E  0EA1               	swapf	??_servo+1,f
   880  018F  0DA1               	rlf	??_servo+1,f
   881  0190  081D               	movf	29,w	;volatile
   882  0191  0621               	xorwf	??_servo+1,w
   883  0192  39DF               	andlw	-33
   884  0193  0621               	xorwf	??_servo+1,w
   885  0194  009D               	movwf	29	;volatile
   886                           
   887                           ;picMotores.c: 80: CCPR2L=(pos>>2);
   888  0195  0879               	movf	_pos,w
   889  0196  00A0               	movwf	??_servo
   890  0197  3002               	movlw	2
   891  0198                     u525:	
   892  0198  1003               	clrc
   893  0199  0CA0               	rrf	??_servo,f
   894  019A  3EFF               	addlw	-1
   895  019B  1D03               	skipz
   896  019C  2998               	goto	u525
   897  019D  0820               	movf	??_servo,w
   898  019E  009B               	movwf	27	;volatile
   899  019F  0008               	return
   900  01A0                     __end_of_servo:	
   901                           ;picMotores.c: 81: return;
   902                           
   903                           
   904                           	psect	text4
   905  0149                     __ptext4:	
   906 ;; *************** function _move_pwmDC *****************
   907 ;; Defined at:
   908 ;;		line 66 in file "picMotores.c"
   909 ;; Parameters:    Size  Location     Type
   910 ;;		None
   911 ;; Auto vars:     Size  Location     Type
   912 ;;		None
   913 ;; Return value:  Size  Location     Type
   914 ;;                  1    wreg      void 
   915 ;; Registers used:
   916 ;;		wreg, status,2, status,0
   917 ;; Tracked objects:
   918 ;;		On entry : 0/0
   919 ;;		On exit  : 0/0
   920 ;;		Unchanged: 0/0
   921 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   922 ;;      Params:         0       0       0       0       0
   923 ;;      Locals:         0       0       0       0       0
   924 ;;      Temps:          0       2       0       0       0
   925 ;;      Totals:         0       2       0       0       0
   926 ;;Total ram usage:        2 bytes
   927 ;; Hardware stack levels used:    1
   928 ;; Hardware stack levels required when called:    1
   929 ;; This function calls:
   930 ;;		Nothing
   931 ;; This function is called by:
   932 ;;		_main
   933 ;; This function uses a non-reentrant model
   934 ;;
   935                           
   936                           
   937                           ;psect for function _move_pwmDC
   938  0149                     _move_pwmDC:	
   939                           
   940                           ;picMotores.c: 67: CCP1CON=0b00001100;
   941                           
   942                           ;incstack = 0
   943                           ; Regs used in _move_pwmDC: [wreg+status,2+status,0]
   944  0149  300C               	movlw	12
   945  014A  1283               	bcf	3,5	;RP0=0, select bank0
   946  014B  1303               	bcf	3,6	;RP1=0, select bank0
   947  014C  0097               	movwf	23	;volatile
   948                           
   949                           ;picMotores.c: 68: CCP1CONbits.DC1B0=(vel)&(0b1);
   950  014D  0878               	movf	_vel,w
   951  014E  3901               	andlw	1
   952  014F  00A0               	movwf	??_move_pwmDC
   953  0150  0EA0               	swapf	??_move_pwmDC,f
   954  0151  0817               	movf	23,w	;volatile
   955  0152  0620               	xorwf	??_move_pwmDC,w
   956  0153  39EF               	andlw	-17
   957  0154  0620               	xorwf	??_move_pwmDC,w
   958  0155  0097               	movwf	23	;volatile
   959                           
   960                           ;picMotores.c: 69: CCP1CONbits.DC1B1=(vel>>1)&(0b1);
   961  0156  0878               	movf	_vel,w
   962  0157  00A0               	movwf	??_move_pwmDC
   963  0158  1003               	clrc
   964  0159  0C20               	rrf	??_move_pwmDC,w
   965  015A  3901               	andlw	1
   966  015B  00A1               	movwf	??_move_pwmDC+1
   967  015C  0EA1               	swapf	??_move_pwmDC+1,f
   968  015D  0DA1               	rlf	??_move_pwmDC+1,f
   969  015E  0817               	movf	23,w	;volatile
   970  015F  0621               	xorwf	??_move_pwmDC+1,w
   971  0160  39DF               	andlw	-33
   972  0161  0621               	xorwf	??_move_pwmDC+1,w
   973  0162  0097               	movwf	23	;volatile
   974                           
   975                           ;picMotores.c: 70: CCPR1L=(vel>>2);
   976  0163  0878               	movf	_vel,w
   977  0164  00A0               	movwf	??_move_pwmDC
   978  0165  3002               	movlw	2
   979  0166                     u545:	
   980  0166  1003               	clrc
   981  0167  0CA0               	rrf	??_move_pwmDC,f
   982  0168  3EFF               	addlw	-1
   983  0169  1D03               	skipz
   984  016A  2966               	goto	u545
   985  016B  0820               	movf	??_move_pwmDC,w
   986  016C  0095               	movwf	21	;volatile
   987                           
   988                           ;picMotores.c: 71: _delay((unsigned long)((1000)*(500000/4000.0)));
   989  016D  30A3               	movlw	163
   990  016E  1283               	bcf	3,5	;RP0=0, select bank0
   991  016F  1303               	bcf	3,6	;RP1=0, select bank0
   992  0170  00A1               	movwf	??_move_pwmDC+1
   993  0171  3054               	movlw	84
   994  0172  00A0               	movwf	??_move_pwmDC
   995  0173                     u867:	
   996  0173  0BA0               	decfsz	??_move_pwmDC,f
   997  0174  2973               	goto	u867
   998  0175  0BA1               	decfsz	??_move_pwmDC+1,f
   999  0176  2973               	goto	u867
  1000  0177  0000               	nop
  1001                           
  1002                           ;picMotores.c: 72: CCP1CON=0;
  1003  0178  1283               	bcf	3,5	;RP0=0, select bank0
  1004  0179  1303               	bcf	3,6	;RP1=0, select bank0
  1005  017A  0197               	clrf	23	;volatile
  1006                           
  1007                           ;picMotores.c: 73: PORTCbits.RC2=0;
  1008  017B  1107               	bcf	7,2	;volatile
  1009  017C  0008               	return
  1010  017D                     __end_of_move_pwmDC:	
  1011                           ;picMotores.c: 74: return;
  1012                           
  1013                           
  1014                           	psect	text5
  1015  01A0                     __ptext5:	
  1016 ;; *************** function _ISR *****************
  1017 ;; Defined at:
  1018 ;;		line 106 in file "picMotores.c"
  1019 ;; Parameters:    Size  Location     Type
  1020 ;;		None
  1021 ;; Auto vars:     Size  Location     Type
  1022 ;;		None
  1023 ;; Return value:  Size  Location     Type
  1024 ;;                  1    wreg      void 
  1025 ;; Registers used:
  1026 ;;		wreg
  1027 ;; Tracked objects:
  1028 ;;		On entry : 0/0
  1029 ;;		On exit  : 0/0
  1030 ;;		Unchanged: 0/0
  1031 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1032 ;;      Params:         0       0       0       0       0
  1033 ;;      Locals:         0       0       0       0       0
  1034 ;;      Temps:          5       0       0       0       0
  1035 ;;      Totals:         5       0       0       0       0
  1036 ;;Total ram usage:        5 bytes
  1037 ;; Hardware stack levels used:    1
  1038 ;; This function calls:
  1039 ;;		Nothing
  1040 ;; This function is called by:
  1041 ;;		Interrupt level 1
  1042 ;; This function uses a non-reentrant model
  1043 ;;
  1044                           
  1045                           
  1046                           ;psect for function _ISR
  1047  01A0                     _ISR:	
  1048                           
  1049                           ;picMotores.c: 107: if (PIR1bits.ADIF==1){
  1050  01A0  1F0C               	btfss	12,6	;volatile
  1051  01A1  29AE               	goto	i1l90
  1052                           
  1053                           ;picMotores.c: 108: PIR1bits.ADIF=0;
  1054  01A2  130C               	bcf	12,6	;volatile
  1055                           
  1056                           ;picMotores.c: 110: ADC=ADRESH;
  1057  01A3  081E               	movf	30,w	;volatile
  1058  01A4  00F0               	movwf	??_ISR
  1059  01A5  0870               	movf	??_ISR,w
  1060  01A6  00A5               	movwf	_ADC
  1061                           
  1062                           ;picMotores.c: 111: _delay((unsigned long)((2)*(500000/4000.0)));
  1063  01A7  3053               	movlw	83
  1064  01A8  00F0               	movwf	??_ISR
  1065  01A9                     u87_27:	
  1066  01A9  0BF0               	decfsz	??_ISR,f
  1067  01AA  29A9               	goto	u87_27
  1068                           
  1069                           ;picMotores.c: 112: ADCON0bits.GO=1;
  1070  01AB  1283               	bcf	3,5	;RP0=0, select bank0
  1071  01AC  1303               	bcf	3,6	;RP1=0, select bank0
  1072  01AD  149F               	bsf	31,1	;volatile
  1073  01AE                     i1l90:	
  1074                           ;picMotores.c: 113: }
  1075                           ;picMotores.c: 114: return;
  1076                           
  1077  01AE  0874               	movf	??_ISR+4,w
  1078  01AF  00FF               	movwf	127
  1079  01B0  0873               	movf	??_ISR+3,w
  1080  01B1  008A               	movwf	10
  1081  01B2  0872               	movf	??_ISR+2,w
  1082  01B3  0084               	movwf	4
  1083  01B4  0E71               	swapf	(??_ISR+1)^(0+-128),w
  1084  01B5  0083               	movwf	3
  1085  01B6  0EFE               	swapf	126,f
  1086  01B7  0E7E               	swapf	126,w
  1087  01B8  0009               	retfie
  1088  01B9                     __end_of_ISR:	
  1089  007E                     btemp	set	126	;btemp
  1090  007E                     wtemp0	set	126
  1091                           
  1092                           	psect	intentry
  1093  0004                     __pintentry:	
  1094                           ;incstack = 0
  1095                           ; Regs used in _ISR: [wreg]
  1096                           
  1097  0004                     interrupt_function:	
  1098  007E                     saved_w	set	btemp
  1099  0004  00FE               	movwf	btemp
  1100  0005  0E03               	swapf	3,w
  1101  0006  00F1               	movwf	??_ISR+1
  1102  0007  0804               	movf	4,w
  1103  0008  00F2               	movwf	??_ISR+2
  1104  0009  080A               	movf	10,w
  1105  000A  00F3               	movwf	??_ISR+3
  1106  000B  1283               	bcf	3,5	;RP0=0, select bank0
  1107  000C  1303               	bcf	3,6	;RP1=0, select bank0
  1108  000D  087F               	movf	btemp+1,w
  1109  000E  00F4               	movwf	??_ISR+4
  1110  000F  120A  118A  29A0   	ljmp	_ISR


Data Sizes:
    Strings     0
    Constant    0
    Data        2
    BSS         4
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      5      10
    BANK0            80      5       6
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_move_servo
    _move_servo->_servo

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0      24
                                              4 BANK0      1     1      0
                         _move_pwmDC
                         _move_servo
                              _servo
                            _stepper
 ---------------------------------------------------------------------------------
 (1) _stepper                                              3     3      0      24
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _move_servo                                           2     2      0       0
                                              2 BANK0      2     2      0
                              _servo
 ---------------------------------------------------------------------------------
 (1) _servo                                                2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _move_pwmDC                                           2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (3) _ISR                                                  5     5      0       0
                                              0 COMMON     5     5      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _move_pwmDC
   _move_servo
     _servo
   _servo
   _stepper

 _ISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0       0       9        0.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0       0       7        0.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50      5       6       5        7.5%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      5       A       1       71.4%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      10      12        0.0%
ABS                  0      0      10       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V1.41 build -162212810 
Symbol Table                                                                                   Tue May 30 15:48:53 2017

             __CFG_CP$OFF 0000               _SSPSTATbits 0094                       l111 0086  
                     l104 006F                       l118 0098                       _ADC 0025  
                     l940 005D                       l934 0055                       l856 00C1  
                     l938 005C                       l980 00A2                       l948 0067  
                     l958 007A                       l888 0127                       l984 00A9  
                     l968 008E                       l986 00AE                       _PR2 0092  
            __CFG_CPD$OFF 0000                       _ISR 01A0                       u525 0198  
                     u545 0166                       u807 00CC                       u817 00DB  
                     u827 00EA                       u837 00F9                       u847 0117  
                     u857 0138                       u867 0173                       _vel 0078  
                     _pos 0079                       fsr0 0004              __CFG_LVP$OFF 0000  
                    ?_ISR 0070                      i1l90 01AE              __CFG_WRT$OFF 0000  
                    _main 0027                      _giro 0076                      btemp 007E  
                    start 0012             __CFG_IESO$OFF 0000             __CFG_MCLRE$ON 0000  
                   ??_ISR 0070                     ?_main 0070             __CFG_WDTE$OFF 0000  
                   _ANSEL 0188                     _T2CON 0012                     _PORTB 0006  
                   _PORTD 0008                     _TRISB 0086                     _TRISC 0087  
                   _TRISD 0088                     u87_27 01A9            __CFG_FCMEN$OFF 0000  
                   _servo 017D            __CFG_BOREN$OFF 0000                     pclath 000A  
                   status 0003           __end_of_stepper 0103                     wtemp0 007E  
         __initialization 0015              __end_of_main 00BB                    ??_main 0024  
                  _ADRESH 001E                    _CCPR1L 0015                    _CCPR2L 001B  
                  ?_servo 0070                    _ANSELH 0189                    _OSCCON 008F  
                  _SSPCON 0014                    _SSPBUF 0013            __CFG_PWRTE$OFF 0000  
                  _accion 0075                    _puerta 0077              __pdataCOMMON 0078  
                  saved_w 007E                 ??_stepper 0020   __end_of__initialization 0023  
          __pcstackCOMMON 0070             __end_of_servo 01A0                   ??_servo 0020  
              __pbssBANK0 0025                __pmaintext 0027                __pintentry 0004  
                 _CCP1CON 0017                   _CCP2CON 001D                   _SSPSTAT 0094  
                 __ptext1 00BB                   __ptext2 0103                   __ptext3 017D  
                 __ptext4 0149                   __ptext5 01A0              __size_of_ISR 0019  
                 _stepper 00BB      end_of_initialization 0023                _move_pwmDC 0149  
              _move_servo 0103                 _PORTBbits 0006                 _PORTCbits 0007  
             _CCP1CONbits 0017               _CCP2CONbits 001D             __pidataCOMMON 01B9  
     start_initialization 0015               __end_of_ISR 01B9  __CFG_FOSC$INTRC_NOCLKOUT 0000  
             ?_move_pwmDC 0070               ?_move_servo 0070               __pbssCOMMON 0075  
               ___latbits 0002             __pcstackBANK0 0020       __size_of_move_pwmDC 0034  
     __size_of_move_servo 0046                  ?_stepper 0070            __size_of_servo 0023  
       interrupt_function 0004                  _PIR1bits 000C                _ADCON0bits 001F  
       __CFG_BOR4V$BOR40V 0000          __size_of_stepper 0048             __size_of_main 0094  
            ??_move_pwmDC 0020              ??_move_servo 0022        __end_of_move_pwmDC 017D  
      __end_of_move_servo 0149                  intlevel1 0000                  stepper@i 0022  
