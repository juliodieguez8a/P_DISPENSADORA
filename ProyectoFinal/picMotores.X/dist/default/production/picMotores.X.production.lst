

Microchip Technology PIC LITE Macro Assembler V1.41 build -162212810 
                                                                                               Thu Jun 01 07:57:57 2017

Microchip Technology Omniscient Code Generator v1.41 (Free mode) build 201701250102
     1                           	processor	16F887
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataCOMMON,global,class=CODE,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	dataCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	maintext,global,class=CODE,split=1,delta=2
    12                           	psect	text1,local,class=CODE,merge=1,delta=2
    13                           	psect	text2,local,class=CODE,merge=1,delta=2
    14                           	psect	text3,local,class=CODE,merge=1,delta=2
    15                           	psect	text4,local,class=CODE,merge=1,delta=2
    16                           	psect	text5,local,class=CODE,merge=1,delta=2
    17                           	psect	text6,local,class=CODE,merge=1,delta=2
    18                           	psect	text7,local,class=CODE,merge=1,delta=2
    19                           	psect	intentry,global,class=CODE,delta=2
    20                           	dabs	1,0x7E,2
    21  0000                     
    22                           ; Version 1.41
    23                           ; Generated 25/01/2017 GMT
    24                           ; 
    25                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    26                           ; All rights reserved.
    27                           ; 
    28                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    29                           ; 
    30                           ; Redistribution and use in source and binary forms, with or without modification, are
    31                           ; permitted provided that the following conditions are met:
    32                           ; 
    33                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    34                           ;        conditions and the following disclaimer.
    35                           ; 
    36                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    37                           ;        of conditions and the following disclaimer in the documentation and/or other
    38                           ;        materials provided with the distribution.
    39                           ; 
    40                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    41                           ;        software without specific prior written permission.
    42                           ; 
    43                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    44                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    45                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    46                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    47                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    48                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    49                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    50                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    51                           ; 
    52                           ; 
    53                           ; Code-generator required, PIC16F887 Definitions
    54                           ; 
    55                           ; SFR Addresses
    56  0000                     	;# 
    57  0001                     	;# 
    58  0002                     	;# 
    59  0003                     	;# 
    60  0004                     	;# 
    61  0005                     	;# 
    62  0006                     	;# 
    63  0007                     	;# 
    64  0008                     	;# 
    65  0009                     	;# 
    66  000A                     	;# 
    67  000B                     	;# 
    68  000C                     	;# 
    69  000D                     	;# 
    70  000E                     	;# 
    71  000E                     	;# 
    72  000F                     	;# 
    73  0010                     	;# 
    74  0011                     	;# 
    75  0012                     	;# 
    76  0013                     	;# 
    77  0014                     	;# 
    78  0015                     	;# 
    79  0015                     	;# 
    80  0016                     	;# 
    81  0017                     	;# 
    82  0018                     	;# 
    83  0019                     	;# 
    84  001A                     	;# 
    85  001B                     	;# 
    86  001B                     	;# 
    87  001C                     	;# 
    88  001D                     	;# 
    89  001E                     	;# 
    90  001F                     	;# 
    91  0081                     	;# 
    92  0085                     	;# 
    93  0086                     	;# 
    94  0087                     	;# 
    95  0088                     	;# 
    96  0089                     	;# 
    97  008C                     	;# 
    98  008D                     	;# 
    99  008E                     	;# 
   100  008F                     	;# 
   101  0090                     	;# 
   102  0091                     	;# 
   103  0092                     	;# 
   104  0093                     	;# 
   105  0093                     	;# 
   106  0093                     	;# 
   107  0094                     	;# 
   108  0095                     	;# 
   109  0096                     	;# 
   110  0097                     	;# 
   111  0098                     	;# 
   112  0099                     	;# 
   113  009A                     	;# 
   114  009B                     	;# 
   115  009C                     	;# 
   116  009D                     	;# 
   117  009E                     	;# 
   118  009F                     	;# 
   119  0105                     	;# 
   120  0107                     	;# 
   121  0108                     	;# 
   122  0109                     	;# 
   123  010C                     	;# 
   124  010C                     	;# 
   125  010D                     	;# 
   126  010E                     	;# 
   127  010F                     	;# 
   128  0185                     	;# 
   129  0187                     	;# 
   130  0188                     	;# 
   131  0189                     	;# 
   132  018C                     	;# 
   133  018D                     	;# 
   134                           
   135                           	psect	idataCOMMON
   136  0252                     __pidataCOMMON:	
   137                           
   138                           ;initializer for _vel
   139  0252  34C8               	retlw	200
   140                           
   141                           ;initializer for _pos
   142  0253  3414               	retlw	20
   143  0013                     _SSPBUF	set	19
   144  0008                     _PORTD	set	8
   145  001F                     _ADCON0	set	31
   146  0014                     _SSPCON	set	20
   147  0012                     _T2CON	set	18
   148  001D                     _CCP2CON	set	29
   149  0005                     _PORTA	set	5
   150  0007                     _PORTCbits	set	7
   151  0015                     _CCPR1L	set	21
   152  0017                     _CCP1CONbits	set	23
   153  0017                     _CCP1CON	set	23
   154  001B                     _CCPR2L	set	27
   155  001D                     _CCP2CONbits	set	29
   156  0006                     _PORTB	set	6
   157  001E                     _ADRESH	set	30
   158  000C                     _PIR1bits	set	12
   159  001F                     _ADCON0bits	set	31
   160  0094                     _SSPSTATbits	set	148
   161  009E                     _ADRESL	set	158
   162  009F                     _ADCON1	set	159
   163  0094                     _SSPSTAT	set	148
   164  0092                     _PR2	set	146
   165  0088                     _TRISD	set	136
   166  0087                     _TRISC	set	135
   167  0086                     _TRISB	set	134
   168  0085                     _TRISA	set	133
   169  008F                     _OSCCON	set	143
   170  0188                     _ANSELbits	set	392
   171  0189                     _ANSELH	set	393
   172  0188                     _ANSEL	set	392
   173                           
   174                           ; #config settings
   175  0000                     
   176                           	psect	cinit
   177  0015                     start_initialization:	
   178  0015                     __initialization:	
   179                           
   180                           ; Initialize objects allocated to COMMON
   181  0015  120A  118A  2252  120A  118A  	fcall	__pidataCOMMON	;fetch initializer
   182  001A  00F8               	movwf	__pdataCOMMON& (0+127)
   183  001B  120A  118A  2253   	fcall	__pidataCOMMON+1	;fetch initializer
   184  001E  00F9               	movwf	(__pdataCOMMON+1)& (0+127)
   185                           
   186                           ; Clear objects allocated to BANK0
   187  001F  01AA               	clrf	__pbssBANK0& (0+127)
   188  0020  01AB               	clrf	(__pbssBANK0+1)& (0+127)
   189  0021  01AC               	clrf	(__pbssBANK0+2)& (0+127)
   190                           
   191                           ; Clear objects allocated to COMMON
   192  0022  01F5               	clrf	__pbssCOMMON& (0+127)
   193  0023  01F6               	clrf	(__pbssCOMMON+1)& (0+127)
   194  0024  01F7               	clrf	(__pbssCOMMON+2)& (0+127)
   195  0025                     end_of_initialization:	
   196                           ;End of C runtime variable initialization code
   197                           
   198  0025                     __end_of__initialization:	
   199  0025  0183               	clrf	3
   200  0026  120A  118A  2829   	ljmp	_main	;jump to C main() function
   201                           
   202                           	psect	bssCOMMON
   203  0075                     __pbssCOMMON:	
   204  0075                     _presion_zero:	
   205  0075                     	ds	1
   206  0076                     _accion:	
   207  0076                     	ds	1
   208  0077                     _giro:	
   209  0077                     	ds	1
   210                           
   211                           	psect	dataCOMMON
   212  0078                     __pdataCOMMON:	
   213  0078                     _vel:	
   214  0078                     	ds	1
   215  0079                     _pos:	
   216  0079                     	ds	1
   217                           
   218                           	psect	bssBANK0
   219  002A                     __pbssBANK0:	
   220  002A                     _presion:	
   221  002A                     	ds	1
   222  002B                     _ADC:	
   223  002B                     	ds	1
   224  002C                     _puerta:	
   225  002C                     	ds	1
   226                           
   227                           	psect	cstackCOMMON
   228  0070                     __pcstackCOMMON:	
   229  0070                     ?_medicion_presion:	
   230  0070                     ?_calibracion_presion:	
   231                           ; 1 bytes @ 0x0
   232                           
   233  0070                     ?_stepper:	
   234                           ; 1 bytes @ 0x0
   235                           
   236  0070                     ?_servo:	
   237                           ; 1 bytes @ 0x0
   238                           
   239  0070                     ?_move_servo:	
   240                           ; 1 bytes @ 0x0
   241                           
   242  0070                     ?_move_pwmDC:	
   243                           ; 1 bytes @ 0x0
   244                           
   245  0070                     ?_ISR:	
   246                           ; 1 bytes @ 0x0
   247                           
   248  0070                     ??_ISR:	
   249                           ; 1 bytes @ 0x0
   250                           
   251  0070                     ?_main:	
   252                           ; 1 bytes @ 0x0
   253                           
   254                           
   255                           ; 1 bytes @ 0x0
   256  0070                     	ds	4
   257  0074                     ??_calibracion_presion:	
   258  0074                     stepper@i:	
   259                           ; 1 bytes @ 0x4
   260                           
   261                           
   262                           ; 1 bytes @ 0x4
   263  0074                     	ds	1
   264                           
   265                           	psect	cstackBANK0
   266  0020                     __pcstackBANK0:	
   267  0020                     ??_medicion_presion:	
   268  0020                     ??_stepper:	
   269                           ; 1 bytes @ 0x0
   270                           
   271  0020                     ??_servo:	
   272                           ; 1 bytes @ 0x0
   273                           
   274  0020                     calibracion_presion@numero:	
   275                           ; 1 bytes @ 0x0
   276                           
   277                           
   278                           ; 1 bytes @ 0x0
   279  0020                     	ds	2
   280  0022                     ??_move_servo:	
   281                           
   282                           ; 1 bytes @ 0x2
   283  0022                     	ds	1
   284  0023                     medicion_presion@objeto:	
   285                           
   286                           ; 1 bytes @ 0x3
   287  0023                     	ds	1
   288  0024                     medicion_presion@numero:	
   289                           
   290                           ; 1 bytes @ 0x4
   291  0024                     	ds	1
   292  0025                     ??_move_pwmDC:	
   293                           
   294                           ; 1 bytes @ 0x5
   295  0025                     	ds	2
   296  0027                     ??_main:	
   297                           
   298                           ; 1 bytes @ 0x7
   299  0027                     	ds	3
   300                           
   301                           	psect	maintext
   302  0029                     __pmaintext:	
   303 ;;
   304 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   305 ;;
   306 ;; *************** function _main *****************
   307 ;; Defined at:
   308 ;;		line 154 in file "picMotores.c"
   309 ;; Parameters:    Size  Location     Type
   310 ;;		None
   311 ;; Auto vars:     Size  Location     Type
   312 ;;		None
   313 ;; Return value:  Size  Location     Type
   314 ;;                  1    wreg      void 
   315 ;; Registers used:
   316 ;;		wreg, status,2, status,0, pclath, cstack
   317 ;; Tracked objects:
   318 ;;		On entry : B00/0
   319 ;;		On exit  : 0/0
   320 ;;		Unchanged: 0/0
   321 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   322 ;;      Params:         0       0       0       0       0
   323 ;;      Locals:         0       0       0       0       0
   324 ;;      Temps:          0       3       0       0       0
   325 ;;      Totals:         0       3       0       0       0
   326 ;;Total ram usage:        3 bytes
   327 ;; Hardware stack levels required when called:    3
   328 ;; This function calls:
   329 ;;		_calibracion_presion
   330 ;;		_medicion_presion
   331 ;;		_move_pwmDC
   332 ;;		_move_servo
   333 ;;		_servo
   334 ;;		_stepper
   335 ;; This function is called by:
   336 ;;		Startup code after reset
   337 ;; This function uses a non-reentrant model
   338 ;;
   339                           
   340                           
   341                           ;psect for function _main
   342  0029                     _main:	
   343                           
   344                           ;picMotores.c: 156: OSCCON = 0b00111100;
   345                           
   346                           ;incstack = 0
   347                           ; Regs used in _main: [wreg+status,2+status,0+pclath+cstack]
   348  0029  303C               	movlw	60
   349  002A  1683               	bsf	3,5	;RP0=1, select bank1
   350  002B  1303               	bcf	3,6	;RP1=0, select bank1
   351  002C  008F               	movwf	15	;volatile
   352                           
   353                           ;picMotores.c: 159: ANSEL=0;
   354  002D  1683               	bsf	3,5	;RP0=1, select bank3
   355  002E  1703               	bsf	3,6	;RP1=1, select bank3
   356  002F  0188               	clrf	8	;volatile
   357                           
   358                           ;picMotores.c: 160: ANSELH=0;
   359  0030  0189               	clrf	9	;volatile
   360                           
   361                           ;picMotores.c: 161: ANSELbits.ANS0;
   362  0031  0808               	movf	8,w	;volatile
   363                           
   364                           ;picMotores.c: 164: TRISA=0b00100001;
   365  0032  3021               	movlw	33
   366  0033  1683               	bsf	3,5	;RP0=1, select bank1
   367  0034  1303               	bcf	3,6	;RP1=0, select bank1
   368  0035  0085               	movwf	5	;volatile
   369                           
   370                           ;picMotores.c: 165: TRISB=0b11110000;
   371  0036  30F0               	movlw	240
   372  0037  0086               	movwf	6	;volatile
   373                           
   374                           ;picMotores.c: 166: TRISC=0b11011001;
   375  0038  30D9               	movlw	217
   376  0039  0087               	movwf	7	;volatile
   377                           
   378                           ;picMotores.c: 167: TRISD=0;
   379  003A  0188               	clrf	8	;volatile
   380                           
   381                           ;picMotores.c: 170: PORTA=0;
   382  003B  1283               	bcf	3,5	;RP0=0, select bank0
   383  003C  1303               	bcf	3,6	;RP1=0, select bank0
   384  003D  0185               	clrf	5	;volatile
   385                           
   386                           ;picMotores.c: 171: PORTB=0b1001;
   387  003E  3009               	movlw	9
   388  003F  0086               	movwf	6	;volatile
   389                           
   390                           ;picMotores.c: 172: PORTCbits.RC2=0;
   391  0040  1107               	bcf	7,2	;volatile
   392                           
   393                           ;picMotores.c: 173: PORTCbits.RC1=0;
   394  0041  1087               	bcf	7,1	;volatile
   395                           
   396                           ;picMotores.c: 176: CCP2CON=0b00001111;
   397  0042  300F               	movlw	15
   398  0043  009D               	movwf	29	;volatile
   399                           
   400                           ;picMotores.c: 177: servo();
   401  0044  120A  118A  2212  120A  118A  	fcall	_servo
   402                           
   403                           ;picMotores.c: 179: PR2=155;
   404  0049  309B               	movlw	155
   405  004A  1683               	bsf	3,5	;RP0=1, select bank1
   406  004B  1303               	bcf	3,6	;RP1=0, select bank1
   407  004C  0092               	movwf	18	;volatile
   408                           
   409                           ;picMotores.c: 180: T2CON = 0b00000111;
   410  004D  3007               	movlw	7
   411  004E  1283               	bcf	3,5	;RP0=0, select bank0
   412  004F  1303               	bcf	3,6	;RP1=0, select bank0
   413  0050  0092               	movwf	18	;volatile
   414                           
   415                           ;picMotores.c: 181: PIR1bits.TMR2IF = 0;
   416  0051  108C               	bcf	12,1	;volatile
   417                           
   418                           ;picMotores.c: 185: SSPSTAT=0b01000000;
   419  0052  3040               	movlw	64
   420  0053  1683               	bsf	3,5	;RP0=1, select bank1
   421  0054  1303               	bcf	3,6	;RP1=0, select bank1
   422  0055  0094               	movwf	20	;volatile
   423                           
   424                           ;picMotores.c: 187: SSPCON=0b00110100;
   425  0056  3034               	movlw	52
   426  0057  1283               	bcf	3,5	;RP0=0, select bank0
   427  0058  1303               	bcf	3,6	;RP1=0, select bank0
   428  0059  0094               	movwf	20	;volatile
   429                           
   430                           ;picMotores.c: 195: ADCON1=0b00000000;
   431  005A  1683               	bsf	3,5	;RP0=1, select bank1
   432  005B  1303               	bcf	3,6	;RP1=0, select bank1
   433  005C  019F               	clrf	31	;volatile
   434                           
   435                           ;picMotores.c: 196: ADCON0=0b11000001;
   436  005D  30C1               	movlw	193
   437  005E  1283               	bcf	3,5	;RP0=0, select bank0
   438  005F  1303               	bcf	3,6	;RP1=0, select bank0
   439  0060  009F               	movwf	31	;volatile
   440                           
   441                           ;picMotores.c: 197: _delay((unsigned long)((1)*(500000/4000.0)));
   442  0061  3028               	movlw	40
   443  0062  1283               	bcf	3,5	;RP0=0, select bank0
   444  0063  1303               	bcf	3,6	;RP1=0, select bank0
   445  0064  00A7               	movwf	??_main
   446  0065                     u757:	
   447  0065  0BA7               	decfsz	??_main,f
   448  0066  2865               	goto	u757
   449  0067  2868               	nop2
   450                           
   451                           ;picMotores.c: 198: ADRESL=0;
   452  0068  1683               	bsf	3,5	;RP0=1, select bank1
   453  0069  1303               	bcf	3,6	;RP1=0, select bank1
   454  006A  019E               	clrf	30	;volatile
   455                           
   456                           ;picMotores.c: 199: ADRESH=0;
   457  006B  1283               	bcf	3,5	;RP0=0, select bank0
   458  006C  1303               	bcf	3,6	;RP1=0, select bank0
   459  006D  019E               	clrf	30	;volatile
   460                           
   461                           ;picMotores.c: 201: giro=0;
   462  006E  01F7               	clrf	_giro
   463  006F                     l1047:	
   464                           ;picMotores.c: 203: while(1){
   465                           
   466                           
   467                           ;picMotores.c: 205: calibracion_presion();
   468  006F  120A  118A  2235  120A  118A  	fcall	_calibracion_presion
   469                           
   470                           ;picMotores.c: 209: if (accion==1){
   471  0074  0376               	decf	_accion,w
   472  0075  1D03               	btfss	3,2
   473  0076  2880               	goto	l1057
   474                           
   475                           ;picMotores.c: 210: stepper();
   476  0077  120A  118A  2107  120A  118A  	fcall	_stepper
   477                           
   478                           ;picMotores.c: 211: if (accion==1){accion=0;}
   479  007C  0376               	decf	_accion,w
   480  007D  1D03               	btfss	3,2
   481  007E  2880               	goto	l1057
   482  007F  01F6               	clrf	_accion
   483  0080                     l1057:	
   484                           
   485                           ;picMotores.c: 212: }
   486                           ;picMotores.c: 215: if (accion==2){
   487  0080  3002               	movlw	2
   488  0081  0676               	xorwf	_accion,w
   489  0082  1D03               	btfss	3,2
   490  0083  28D0               	goto	l1085
   491                           
   492                           ;picMotores.c: 216: move_pwmDC();
   493  0084  120A  118A  21D5  120A  118A  	fcall	_move_pwmDC
   494                           
   495                           ;picMotores.c: 219: giro=1;
   496  0089  01F7               	clrf	_giro
   497  008A  0AF7               	incf	_giro,f
   498  008B                     l1065:	
   499                           ;picMotores.c: 220: while(giro==1){
   500                           
   501  008B  0377               	decf	_giro,w
   502  008C  1D03               	btfss	3,2
   503  008D  2894               	goto	l1067
   504                           
   505                           ;picMotores.c: 221: move_servo();
   506  008E  120A  118A  214F  120A  118A  	fcall	_move_servo
   507  0093  288B               	goto	l1065
   508  0094                     l1067:	
   509                           
   510                           ;picMotores.c: 222: }
   511                           ;picMotores.c: 223: calibracion_presion();
   512  0094  120A  118A  2235  120A  118A  	fcall	_calibracion_presion
   513  0099                     l1071:	
   514                           ;picMotores.c: 225: while(medicion_presion()!=2){PORTD=3;}
   515                           
   516  0099  120A  118A  2195  120A  118A  	fcall	_medicion_presion
   517  009E  3A02               	xorlw	2
   518  009F  1903               	btfsc	3,2
   519  00A0  28A6               	goto	l1073
   520  00A1  3003               	movlw	3
   521  00A2  1283               	bcf	3,5	;RP0=0, select bank0
   522  00A3  1303               	bcf	3,6	;RP1=0, select bank0
   523  00A4  0088               	movwf	8	;volatile
   524  00A5  2899               	goto	l1071
   525  00A6                     l1073:	
   526                           
   527                           ;picMotores.c: 226: PORTD=1;
   528  00A6  3001               	movlw	1
   529  00A7  1283               	bcf	3,5	;RP0=0, select bank0
   530  00A8  1303               	bcf	3,6	;RP1=0, select bank0
   531  00A9  0088               	movwf	8	;volatile
   532                           
   533                           ;picMotores.c: 227: _delay((unsigned long)((2000)*(500000/4000.0)));
   534  00AA  3002               	movlw	2
   535  00AB  1283               	bcf	3,5	;RP0=0, select bank0
   536  00AC  1303               	bcf	3,6	;RP1=0, select bank0
   537  00AD  00A9               	movwf	??_main+2
   538  00AE  3045               	movlw	69
   539  00AF  00A8               	movwf	??_main+1
   540  00B0  30A9               	movlw	169
   541  00B1  00A7               	movwf	??_main
   542  00B2                     u767:	
   543  00B2  0BA7               	decfsz	??_main,f
   544  00B3  28B2               	goto	u767
   545  00B4  0BA8               	decfsz	??_main+1,f
   546  00B5  28B2               	goto	u767
   547  00B6  0BA9               	decfsz	??_main+2,f
   548  00B7  28B2               	goto	u767
   549                           
   550                           ;picMotores.c: 228: giro=2;
   551  00B8  3002               	movlw	2
   552  00B9  1283               	bcf	3,5	;RP0=0, select bank0
   553  00BA  1303               	bcf	3,6	;RP1=0, select bank0
   554  00BB  00A7               	movwf	??_main
   555  00BC  0827               	movf	??_main,w
   556  00BD  00F7               	movwf	_giro
   557  00BE                     l1077:	
   558                           ;picMotores.c: 229: while(giro==2){
   559                           
   560  00BE  3002               	movlw	2
   561  00BF  0677               	xorwf	_giro,w
   562  00C0  1D03               	btfss	3,2
   563  00C1  28C8               	goto	l1079
   564                           
   565                           ;picMotores.c: 230: move_servo();
   566  00C2  120A  118A  214F  120A  118A  	fcall	_move_servo
   567  00C7  28BE               	goto	l1077
   568  00C8                     l1079:	
   569                           
   570                           ;picMotores.c: 231: }
   571                           ;picMotores.c: 232: PORTD=2;
   572  00C8  3002               	movlw	2
   573  00C9  1283               	bcf	3,5	;RP0=0, select bank0
   574  00CA  1303               	bcf	3,6	;RP1=0, select bank0
   575  00CB  0088               	movwf	8	;volatile
   576                           
   577                           ;picMotores.c: 233: if (accion==2){accion=0;}
   578  00CC  3002               	movlw	2
   579  00CD  0676               	xorwf	_accion,w
   580  00CE  1903               	btfsc	3,2
   581  00CF  01F6               	clrf	_accion
   582  00D0                     l1085:	
   583                           
   584                           ;picMotores.c: 234: }
   585                           ;picMotores.c: 236: if ((accion==4&pos==20)){
   586  00D0  3004               	movlw	4
   587  00D1  0676               	xorwf	_accion,w
   588  00D2  1D03               	btfss	3,2
   589  00D3  28E2               	goto	l1095
   590  00D4  3014               	movlw	20
   591  00D5  0679               	xorwf	_pos,w
   592  00D6  1D03               	btfss	3,2
   593  00D7  28E2               	goto	l1095
   594                           
   595                           ;picMotores.c: 238: giro=2;
   596  00D8  3002               	movlw	2
   597  00D9  1283               	bcf	3,5	;RP0=0, select bank0
   598  00DA  1303               	bcf	3,6	;RP1=0, select bank0
   599  00DB  00A7               	movwf	??_main
   600  00DC  0827               	movf	??_main,w
   601  00DD  00F7               	movwf	_giro
   602                           
   603                           ;picMotores.c: 240: if (accion==4){accion=0;}
   604  00DE  3004               	movlw	4
   605  00DF  0676               	xorwf	_accion,w
   606  00E0  1903               	btfsc	3,2
   607  00E1  01F6               	clrf	_accion
   608  00E2                     l1095:	
   609                           
   610                           ;picMotores.c: 241: }
   611                           ;picMotores.c: 243: if ((accion==3&pos==77)){
   612  00E2  3003               	movlw	3
   613  00E3  0676               	xorwf	_accion,w
   614  00E4  1D03               	btfss	3,2
   615  00E5  28F0               	goto	l1105
   616  00E6  304D               	movlw	77
   617  00E7  0679               	xorwf	_pos,w
   618  00E8  1D03               	btfss	3,2
   619  00E9  28F0               	goto	l1105
   620                           
   621                           ;picMotores.c: 244: giro=1;
   622  00EA  01F7               	clrf	_giro
   623  00EB  0AF7               	incf	_giro,f
   624                           
   625                           ;picMotores.c: 245: if (accion==3){accion=0;}
   626  00EC  3003               	movlw	3
   627  00ED  0676               	xorwf	_accion,w
   628  00EE  1903               	btfsc	3,2
   629  00EF  01F6               	clrf	_accion
   630  00F0                     l1105:	
   631                           
   632                           ;picMotores.c: 246: }
   633                           ;picMotores.c: 248: if (giro==1|giro==2){
   634  00F0  0377               	decf	_giro,w
   635  00F1  1903               	btfsc	3,2
   636  00F2  28F7               	goto	l1109
   637  00F3  3002               	movlw	2
   638  00F4  0677               	xorwf	_giro,w
   639  00F5  1D03               	btfss	3,2
   640  00F6  28FC               	goto	l1111
   641  00F7                     l1109:	
   642                           
   643                           ;picMotores.c: 250: move_servo();
   644  00F7  120A  118A  214F  120A  118A  	fcall	_move_servo
   645  00FC                     l1111:	
   646                           
   647                           ;picMotores.c: 251: }
   648                           ;picMotores.c: 254: if (SSPSTATbits.BF==1){
   649  00FC  1683               	bsf	3,5	;RP0=1, select bank1
   650  00FD  1303               	bcf	3,6	;RP1=0, select bank1
   651  00FE  1C14               	btfss	20,0	;volatile
   652  00FF  286F               	goto	l1047
   653                           
   654                           ;picMotores.c: 255: accion=SSPBUF;
   655  0100  1283               	bcf	3,5	;RP0=0, select bank0
   656  0101  1303               	bcf	3,6	;RP1=0, select bank0
   657  0102  0813               	movf	19,w	;volatile
   658  0103  00A7               	movwf	??_main
   659  0104  0827               	movf	??_main,w
   660  0105  00F6               	movwf	_accion
   661  0106  286F               	goto	l1047
   662  0107                     __end_of_main:	
   663                           
   664                           	psect	text1
   665  0107                     __ptext1:	
   666 ;; *************** function _stepper *****************
   667 ;; Defined at:
   668 ;;		line 62 in file "picMotores.c"
   669 ;; Parameters:    Size  Location     Type
   670 ;;		None
   671 ;; Auto vars:     Size  Location     Type
   672 ;;  i               1    4[COMMON] unsigned char 
   673 ;; Return value:  Size  Location     Type
   674 ;;                  1    wreg      void 
   675 ;; Registers used:
   676 ;;		wreg, status,2, status,0
   677 ;; Tracked objects:
   678 ;;		On entry : 0/0
   679 ;;		On exit  : 0/0
   680 ;;		Unchanged: 0/0
   681 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   682 ;;      Params:         0       0       0       0       0
   683 ;;      Locals:         1       0       0       0       0
   684 ;;      Temps:          0       2       0       0       0
   685 ;;      Totals:         1       2       0       0       0
   686 ;;Total ram usage:        3 bytes
   687 ;; Hardware stack levels used:    1
   688 ;; Hardware stack levels required when called:    1
   689 ;; This function calls:
   690 ;;		Nothing
   691 ;; This function is called by:
   692 ;;		_main
   693 ;; This function uses a non-reentrant model
   694 ;;
   695                           
   696                           
   697                           ;psect for function _stepper
   698  0107                     _stepper:	
   699                           
   700                           ;picMotores.c: 63: char i=3;
   701                           
   702                           ;incstack = 0
   703                           ; Regs used in _stepper: [wreg+status,2+status,0]
   704  0107  3003               	movlw	3
   705  0108  1283               	bcf	3,5	;RP0=0, select bank0
   706  0109  1303               	bcf	3,6	;RP1=0, select bank0
   707  010A  00A0               	movwf	??_stepper
   708  010B  0820               	movf	??_stepper,w
   709  010C  00F4               	movwf	stepper@i
   710  010D                     l959:	
   711                           ;picMotores.c: 64: while (i!=0){
   712                           
   713  010D  0874               	movf	stepper@i,w
   714  010E  1903               	btfsc	3,2
   715  010F  0008               	return
   716                           
   717                           ;picMotores.c: 65: PORTB=0b0011;
   718  0110  3003               	movlw	3
   719  0111  1283               	bcf	3,5	;RP0=0, select bank0
   720  0112  1303               	bcf	3,6	;RP1=0, select bank0
   721  0113  0086               	movwf	6	;volatile
   722                           
   723                           ;picMotores.c: 66: _delay((unsigned long)((200)*(500000/4000.0)));
   724  0114  3021               	movlw	33
   725  0115  1283               	bcf	3,5	;RP0=0, select bank0
   726  0116  1303               	bcf	3,6	;RP1=0, select bank0
   727  0117  00A1               	movwf	??_stepper+1
   728  0118  3075               	movlw	117
   729  0119  00A0               	movwf	??_stepper
   730  011A                     u777:	
   731  011A  0BA0               	decfsz	??_stepper,f
   732  011B  291A               	goto	u777
   733  011C  0BA1               	decfsz	??_stepper+1,f
   734  011D  291A               	goto	u777
   735  011E  291F               	nop2
   736                           
   737                           ;picMotores.c: 67: PORTB=0b0110;
   738  011F  3006               	movlw	6
   739  0120  1283               	bcf	3,5	;RP0=0, select bank0
   740  0121  1303               	bcf	3,6	;RP1=0, select bank0
   741  0122  0086               	movwf	6	;volatile
   742                           
   743                           ;picMotores.c: 68: _delay((unsigned long)((200)*(500000/4000.0)));
   744  0123  3021               	movlw	33
   745  0124  1283               	bcf	3,5	;RP0=0, select bank0
   746  0125  1303               	bcf	3,6	;RP1=0, select bank0
   747  0126  00A1               	movwf	??_stepper+1
   748  0127  3075               	movlw	117
   749  0128  00A0               	movwf	??_stepper
   750  0129                     u787:	
   751  0129  0BA0               	decfsz	??_stepper,f
   752  012A  2929               	goto	u787
   753  012B  0BA1               	decfsz	??_stepper+1,f
   754  012C  2929               	goto	u787
   755  012D  292E               	nop2
   756                           
   757                           ;picMotores.c: 69: PORTB=0b1100;
   758  012E  300C               	movlw	12
   759  012F  1283               	bcf	3,5	;RP0=0, select bank0
   760  0130  1303               	bcf	3,6	;RP1=0, select bank0
   761  0131  0086               	movwf	6	;volatile
   762                           
   763                           ;picMotores.c: 70: _delay((unsigned long)((200)*(500000/4000.0)));
   764  0132  3021               	movlw	33
   765  0133  1283               	bcf	3,5	;RP0=0, select bank0
   766  0134  1303               	bcf	3,6	;RP1=0, select bank0
   767  0135  00A1               	movwf	??_stepper+1
   768  0136  3075               	movlw	117
   769  0137  00A0               	movwf	??_stepper
   770  0138                     u797:	
   771  0138  0BA0               	decfsz	??_stepper,f
   772  0139  2938               	goto	u797
   773  013A  0BA1               	decfsz	??_stepper+1,f
   774  013B  2938               	goto	u797
   775  013C  293D               	nop2
   776                           
   777                           ;picMotores.c: 71: PORTB=0b1001;
   778  013D  3009               	movlw	9
   779  013E  1283               	bcf	3,5	;RP0=0, select bank0
   780  013F  1303               	bcf	3,6	;RP1=0, select bank0
   781  0140  0086               	movwf	6	;volatile
   782                           
   783                           ;picMotores.c: 72: _delay((unsigned long)((200)*(500000/4000.0)));
   784  0141  3021               	movlw	33
   785  0142  1283               	bcf	3,5	;RP0=0, select bank0
   786  0143  1303               	bcf	3,6	;RP1=0, select bank0
   787  0144  00A1               	movwf	??_stepper+1
   788  0145  3075               	movlw	117
   789  0146  00A0               	movwf	??_stepper
   790  0147                     u807:	
   791  0147  0BA0               	decfsz	??_stepper,f
   792  0148  2947               	goto	u807
   793  0149  0BA1               	decfsz	??_stepper+1,f
   794  014A  2947               	goto	u807
   795  014B  294C               	nop2
   796                           
   797                           ;picMotores.c: 73: i--;
   798  014C  3001               	movlw	1
   799  014D  02F4               	subwf	stepper@i,f
   800  014E  290D               	goto	l959
   801  014F                     __end_of_stepper:	
   802                           ;picMotores.c: 74: }
   803                           ;picMotores.c: 76: return;
   804                           
   805                           
   806                           	psect	text2
   807  014F                     __ptext2:	
   808 ;; *************** function _move_servo *****************
   809 ;; Defined at:
   810 ;;		line 106 in file "picMotores.c"
   811 ;; Parameters:    Size  Location     Type
   812 ;;		None
   813 ;; Auto vars:     Size  Location     Type
   814 ;;		None
   815 ;; Return value:  Size  Location     Type
   816 ;;                  1    wreg      void 
   817 ;; Registers used:
   818 ;;		wreg, status,2, status,0, pclath, cstack
   819 ;; Tracked objects:
   820 ;;		On entry : 0/0
   821 ;;		On exit  : 0/0
   822 ;;		Unchanged: 0/0
   823 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   824 ;;      Params:         0       0       0       0       0
   825 ;;      Locals:         0       0       0       0       0
   826 ;;      Temps:          0       2       0       0       0
   827 ;;      Totals:         0       2       0       0       0
   828 ;;Total ram usage:        2 bytes
   829 ;; Hardware stack levels used:    1
   830 ;; Hardware stack levels required when called:    2
   831 ;; This function calls:
   832 ;;		_servo
   833 ;; This function is called by:
   834 ;;		_main
   835 ;; This function uses a non-reentrant model
   836 ;;
   837                           
   838                           
   839                           ;psect for function _move_servo
   840  014F                     _move_servo:	
   841                           
   842                           ;picMotores.c: 107: if (giro==1){
   843                           
   844                           ;incstack = 0
   845                           ; Regs used in _move_servo: [wreg+status,2+status,0+pclath+cstack]
   846  014F  0377               	decf	_giro,w
   847  0150  1D03               	btfss	3,2
   848  0151  2973               	goto	l975
   849                           
   850                           ;picMotores.c: 108: pos++;
   851  0152  3001               	movlw	1
   852  0153  1283               	bcf	3,5	;RP0=0, select bank0
   853  0154  1303               	bcf	3,6	;RP1=0, select bank0
   854  0155  00A2               	movwf	??_move_servo
   855  0156  0822               	movf	??_move_servo,w
   856  0157  07F9               	addwf	_pos,f
   857                           
   858                           ;picMotores.c: 109: servo();
   859  0158  120A  118A  2212  120A  118A  	fcall	_servo
   860                           
   861                           ;picMotores.c: 110: _delay((unsigned long)((100)*(500000/4000.0)));
   862  015D  3011               	movlw	17
   863  015E  1283               	bcf	3,5	;RP0=0, select bank0
   864  015F  1303               	bcf	3,6	;RP1=0, select bank0
   865  0160  00A3               	movwf	??_move_servo+1
   866  0161  3039               	movlw	57
   867  0162  00A2               	movwf	??_move_servo
   868  0163                     u817:	
   869  0163  0BA2               	decfsz	??_move_servo,f
   870  0164  2963               	goto	u817
   871  0165  0BA3               	decfsz	??_move_servo+1,f
   872  0166  2963               	goto	u817
   873  0167  2968               	nop2
   874                           
   875                           ;picMotores.c: 111: if(pos==78){
   876  0168  304E               	movlw	78
   877  0169  0679               	xorwf	_pos,w
   878  016A  1D03               	btfss	3,2
   879  016B  2973               	goto	l975
   880                           
   881                           ;picMotores.c: 112: giro=0;
   882  016C  01F7               	clrf	_giro
   883                           
   884                           ;picMotores.c: 113: pos=77;
   885  016D  304D               	movlw	77
   886  016E  1283               	bcf	3,5	;RP0=0, select bank0
   887  016F  1303               	bcf	3,6	;RP1=0, select bank0
   888  0170  00A2               	movwf	??_move_servo
   889  0171  0822               	movf	??_move_servo,w
   890  0172  00F9               	movwf	_pos
   891  0173                     l975:	
   892                           
   893                           ;picMotores.c: 114: }
   894                           ;picMotores.c: 115: }
   895                           ;picMotores.c: 116: if (giro==2){
   896  0173  3002               	movlw	2
   897  0174  0677               	xorwf	_giro,w
   898  0175  1D03               	btfss	3,2
   899  0176  0008               	return
   900                           
   901                           ;picMotores.c: 117: pos--;
   902  0177  3001               	movlw	1
   903  0178  02F9               	subwf	_pos,f
   904                           
   905                           ;picMotores.c: 118: servo();
   906  0179  120A  118A  2212  120A  118A  	fcall	_servo
   907                           
   908                           ;picMotores.c: 119: _delay((unsigned long)((100)*(500000/4000.0)));
   909  017E  3011               	movlw	17
   910  017F  1283               	bcf	3,5	;RP0=0, select bank0
   911  0180  1303               	bcf	3,6	;RP1=0, select bank0
   912  0181  00A3               	movwf	??_move_servo+1
   913  0182  3039               	movlw	57
   914  0183  00A2               	movwf	??_move_servo
   915  0184                     u827:	
   916  0184  0BA2               	decfsz	??_move_servo,f
   917  0185  2984               	goto	u827
   918  0186  0BA3               	decfsz	??_move_servo+1,f
   919  0187  2984               	goto	u827
   920  0188  2989               	nop2
   921                           
   922                           ;picMotores.c: 120: if(pos==19){
   923  0189  3013               	movlw	19
   924  018A  0679               	xorwf	_pos,w
   925  018B  1D03               	btfss	3,2
   926  018C  0008               	return
   927                           
   928                           ;picMotores.c: 121: giro=0;
   929  018D  01F7               	clrf	_giro
   930                           
   931                           ;picMotores.c: 122: pos=20;
   932  018E  3014               	movlw	20
   933  018F  1283               	bcf	3,5	;RP0=0, select bank0
   934  0190  1303               	bcf	3,6	;RP1=0, select bank0
   935  0191  00A2               	movwf	??_move_servo
   936  0192  0822               	movf	??_move_servo,w
   937  0193  00F9               	movwf	_pos
   938  0194  0008               	return
   939  0195                     __end_of_move_servo:	
   940                           ;picMotores.c: 123: }
   941                           ;picMotores.c: 124: }
   942                           ;picMotores.c: 125: return;
   943                           
   944                           
   945                           	psect	text3
   946  0212                     __ptext3:	
   947 ;; *************** function _servo *****************
   948 ;; Defined at:
   949 ;;		line 99 in file "picMotores.c"
   950 ;; Parameters:    Size  Location     Type
   951 ;;		None
   952 ;; Auto vars:     Size  Location     Type
   953 ;;		None
   954 ;; Return value:  Size  Location     Type
   955 ;;                  1    wreg      void 
   956 ;; Registers used:
   957 ;;		wreg, status,2, status,0
   958 ;; Tracked objects:
   959 ;;		On entry : 0/0
   960 ;;		On exit  : 0/0
   961 ;;		Unchanged: 0/0
   962 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   963 ;;      Params:         0       0       0       0       0
   964 ;;      Locals:         0       0       0       0       0
   965 ;;      Temps:          0       2       0       0       0
   966 ;;      Totals:         0       2       0       0       0
   967 ;;Total ram usage:        2 bytes
   968 ;; Hardware stack levels used:    1
   969 ;; Hardware stack levels required when called:    1
   970 ;; This function calls:
   971 ;;		Nothing
   972 ;; This function is called by:
   973 ;;		_move_servo
   974 ;;		_main
   975 ;; This function uses a non-reentrant model
   976 ;;
   977                           
   978                           
   979                           ;psect for function _servo
   980  0212                     _servo:	
   981                           
   982                           ;picMotores.c: 100: CCP2CONbits.DC2B0=(pos)&(0b1);
   983                           
   984                           ;incstack = 0
   985                           ; Regs used in _servo: [wreg+status,2+status,0]
   986  0212  0879               	movf	_pos,w
   987  0213  3901               	andlw	1
   988  0214  1283               	bcf	3,5	;RP0=0, select bank0
   989  0215  1303               	bcf	3,6	;RP1=0, select bank0
   990  0216  00A0               	movwf	??_servo
   991  0217  0EA0               	swapf	??_servo,f
   992  0218  081D               	movf	29,w	;volatile
   993  0219  0620               	xorwf	??_servo,w
   994  021A  39EF               	andlw	-17
   995  021B  0620               	xorwf	??_servo,w
   996  021C  009D               	movwf	29	;volatile
   997                           
   998                           ;picMotores.c: 101: CCP2CONbits.DC2B1=(pos>>1)&(0b1);
   999  021D  0879               	movf	_pos,w
  1000  021E  00A0               	movwf	??_servo
  1001  021F  1003               	clrc
  1002  0220  0C20               	rrf	??_servo,w
  1003  0221  3901               	andlw	1
  1004  0222  00A1               	movwf	??_servo+1
  1005  0223  0EA1               	swapf	??_servo+1,f
  1006  0224  0DA1               	rlf	??_servo+1,f
  1007  0225  081D               	movf	29,w	;volatile
  1008  0226  0621               	xorwf	??_servo+1,w
  1009  0227  39DF               	andlw	-33
  1010  0228  0621               	xorwf	??_servo+1,w
  1011  0229  009D               	movwf	29	;volatile
  1012                           
  1013                           ;picMotores.c: 102: CCPR2L=(pos>>2);
  1014  022A  0879               	movf	_pos,w
  1015  022B  00A0               	movwf	??_servo
  1016  022C  3002               	movlw	2
  1017  022D                     u505:	
  1018  022D  1003               	clrc
  1019  022E  0CA0               	rrf	??_servo,f
  1020  022F  3EFF               	addlw	-1
  1021  0230  1D03               	skipz
  1022  0231  2A2D               	goto	u505
  1023  0232  0820               	movf	??_servo,w
  1024  0233  009B               	movwf	27	;volatile
  1025  0234  0008               	return
  1026  0235                     __end_of_servo:	
  1027                           ;picMotores.c: 103: return;
  1028                           
  1029                           
  1030                           	psect	text4
  1031  01D5                     __ptext4:	
  1032 ;; *************** function _move_pwmDC *****************
  1033 ;; Defined at:
  1034 ;;		line 128 in file "picMotores.c"
  1035 ;; Parameters:    Size  Location     Type
  1036 ;;		None
  1037 ;; Auto vars:     Size  Location     Type
  1038 ;;		None
  1039 ;; Return value:  Size  Location     Type
  1040 ;;                  1    wreg      void 
  1041 ;; Registers used:
  1042 ;;		wreg, status,2, status,0, pclath, cstack
  1043 ;; Tracked objects:
  1044 ;;		On entry : 0/0
  1045 ;;		On exit  : 0/0
  1046 ;;		Unchanged: 0/0
  1047 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1048 ;;      Params:         0       0       0       0       0
  1049 ;;      Locals:         0       0       0       0       0
  1050 ;;      Temps:          0       2       0       0       0
  1051 ;;      Totals:         0       2       0       0       0
  1052 ;;Total ram usage:        2 bytes
  1053 ;; Hardware stack levels used:    1
  1054 ;; Hardware stack levels required when called:    2
  1055 ;; This function calls:
  1056 ;;		_medicion_presion
  1057 ;; This function is called by:
  1058 ;;		_main
  1059 ;; This function uses a non-reentrant model
  1060 ;;
  1061                           
  1062                           
  1063                           ;psect for function _move_pwmDC
  1064  01D5                     _move_pwmDC:	
  1065                           
  1066                           ;picMotores.c: 129: CCP1CON=0b00001100;
  1067                           
  1068                           ;incstack = 0
  1069                           ; Regs used in _move_pwmDC: [wreg+status,2+status,0+pclath+cstack]
  1070  01D5  300C               	movlw	12
  1071  01D6  1283               	bcf	3,5	;RP0=0, select bank0
  1072  01D7  1303               	bcf	3,6	;RP1=0, select bank0
  1073  01D8  0097               	movwf	23	;volatile
  1074                           
  1075                           ;picMotores.c: 130: CCP1CONbits.DC1B0=(vel)&(0b1);
  1076  01D9  0878               	movf	_vel,w
  1077  01DA  3901               	andlw	1
  1078  01DB  00A5               	movwf	??_move_pwmDC
  1079  01DC  0EA5               	swapf	??_move_pwmDC,f
  1080  01DD  0817               	movf	23,w	;volatile
  1081  01DE  0625               	xorwf	??_move_pwmDC,w
  1082  01DF  39EF               	andlw	-17
  1083  01E0  0625               	xorwf	??_move_pwmDC,w
  1084  01E1  0097               	movwf	23	;volatile
  1085                           
  1086                           ;picMotores.c: 131: CCP1CONbits.DC1B1=(vel>>1)&(0b1);
  1087  01E2  0878               	movf	_vel,w
  1088  01E3  00A5               	movwf	??_move_pwmDC
  1089  01E4  1003               	clrc
  1090  01E5  0C25               	rrf	??_move_pwmDC,w
  1091  01E6  3901               	andlw	1
  1092  01E7  00A6               	movwf	??_move_pwmDC+1
  1093  01E8  0EA6               	swapf	??_move_pwmDC+1,f
  1094  01E9  0DA6               	rlf	??_move_pwmDC+1,f
  1095  01EA  0817               	movf	23,w	;volatile
  1096  01EB  0626               	xorwf	??_move_pwmDC+1,w
  1097  01EC  39DF               	andlw	-33
  1098  01ED  0626               	xorwf	??_move_pwmDC+1,w
  1099  01EE  0097               	movwf	23	;volatile
  1100                           
  1101                           ;picMotores.c: 132: CCPR1L=(vel>>2);
  1102  01EF  0878               	movf	_vel,w
  1103  01F0  00A5               	movwf	??_move_pwmDC
  1104  01F1  3002               	movlw	2
  1105  01F2                     u575:	
  1106  01F2  1003               	clrc
  1107  01F3  0CA5               	rrf	??_move_pwmDC,f
  1108  01F4  3EFF               	addlw	-1
  1109  01F5  1D03               	skipz
  1110  01F6  29F2               	goto	u575
  1111  01F7  0825               	movf	??_move_pwmDC,w
  1112  01F8  0095               	movwf	21	;volatile
  1113  01F9                     l1001:	
  1114                           ;picMotores.c: 133: while (medicion_presion()!=1){
  1115                           
  1116  01F9  120A  118A  2195  120A  118A  	fcall	_medicion_presion
  1117  01FE  3A01               	xorlw	1
  1118  01FF  1903               	btfsc	3,2
  1119  0200  2A0D               	goto	l1003
  1120                           
  1121                           ;picMotores.c: 134: _delay((unsigned long)((50)*(500000/4000.0)));
  1122  0201  3009               	movlw	9
  1123  0202  1283               	bcf	3,5	;RP0=0, select bank0
  1124  0203  1303               	bcf	3,6	;RP1=0, select bank0
  1125  0204  00A6               	movwf	??_move_pwmDC+1
  1126  0205  301B               	movlw	27
  1127  0206  00A5               	movwf	??_move_pwmDC
  1128  0207                     u837:	
  1129  0207  0BA5               	decfsz	??_move_pwmDC,f
  1130  0208  2A07               	goto	u837
  1131  0209  0BA6               	decfsz	??_move_pwmDC+1,f
  1132  020A  2A07               	goto	u837
  1133  020B  2A0C               	nop2
  1134  020C  29F9               	goto	l1001
  1135  020D                     l1003:	
  1136                           
  1137                           ;picMotores.c: 135: }
  1138                           ;picMotores.c: 136: CCP1CON=0;
  1139  020D  1283               	bcf	3,5	;RP0=0, select bank0
  1140  020E  1303               	bcf	3,6	;RP1=0, select bank0
  1141  020F  0197               	clrf	23	;volatile
  1142                           
  1143                           ;picMotores.c: 137: PORTCbits.RC2=0;
  1144  0210  1107               	bcf	7,2	;volatile
  1145  0211  0008               	return
  1146  0212                     __end_of_move_pwmDC:	
  1147                           ;picMotores.c: 138: return;
  1148                           
  1149                           
  1150                           	psect	text5
  1151  0195                     __ptext5:	
  1152 ;; *************** function _medicion_presion *****************
  1153 ;; Defined at:
  1154 ;;		line 31 in file "picMotores.c"
  1155 ;; Parameters:    Size  Location     Type
  1156 ;;		None
  1157 ;; Auto vars:     Size  Location     Type
  1158 ;;  numero          1    4[BANK0 ] unsigned char 
  1159 ;;  objeto          1    3[BANK0 ] unsigned char 
  1160 ;; Return value:  Size  Location     Type
  1161 ;;                  1    wreg      unsigned char 
  1162 ;; Registers used:
  1163 ;;		wreg, status,2
  1164 ;; Tracked objects:
  1165 ;;		On entry : 0/0
  1166 ;;		On exit  : 0/0
  1167 ;;		Unchanged: 0/0
  1168 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1169 ;;      Params:         0       0       0       0       0
  1170 ;;      Locals:         0       2       0       0       0
  1171 ;;      Temps:          0       3       0       0       0
  1172 ;;      Totals:         0       5       0       0       0
  1173 ;;Total ram usage:        5 bytes
  1174 ;; Hardware stack levels used:    1
  1175 ;; Hardware stack levels required when called:    1
  1176 ;; This function calls:
  1177 ;;		Nothing
  1178 ;; This function is called by:
  1179 ;;		_move_pwmDC
  1180 ;;		_main
  1181 ;; This function uses a non-reentrant model
  1182 ;;
  1183                           
  1184                           
  1185                           ;psect for function _medicion_presion
  1186  0195                     _medicion_presion:	
  1187                           
  1188                           ;picMotores.c: 32: char numero=0;
  1189                           
  1190                           ;incstack = 0
  1191                           ; Regs used in _medicion_presion: [wreg+status,2]
  1192  0195  1283               	bcf	3,5	;RP0=0, select bank0
  1193  0196  1303               	bcf	3,6	;RP1=0, select bank0
  1194  0197  01A4               	clrf	medicion_presion@numero
  1195                           
  1196                           ;picMotores.c: 33: char objeto=0;
  1197  0198  01A3               	clrf	medicion_presion@objeto
  1198                           
  1199                           ;picMotores.c: 34: ADCON0bits.GO=1;
  1200  0199  149F               	bsf	31,1	;volatile
  1201  019A                     l82:	
  1202                           ;picMotores.c: 35: while(PIR1bits.ADIF==0){
  1203                           
  1204                           
  1205                           ;picMotores.c: 36: _delay((unsigned long)((1)*(500000/4000000.0)));
  1206  019A  1283               	bcf	3,5	;RP0=0, select bank0
  1207  019B  1303               	bcf	3,6	;RP1=0, select bank0
  1208  019C  1F0C               	btfss	12,6	;volatile
  1209  019D  299A               	goto	l82
  1210                           
  1211                           ;picMotores.c: 37: }
  1212                           ;picMotores.c: 38: PIR1bits.ADIF=0;
  1213  019E  130C               	bcf	12,6	;volatile
  1214                           
  1215                           ;picMotores.c: 39: numero=ADRESH;
  1216  019F  081E               	movf	30,w	;volatile
  1217  01A0  00A0               	movwf	??_medicion_presion
  1218  01A1  0820               	movf	??_medicion_presion,w
  1219  01A2  00A4               	movwf	medicion_presion@numero
  1220                           
  1221                           ;picMotores.c: 40: if (numero > (presion_zero+3)){
  1222  01A3  0875               	movf	_presion_zero,w
  1223  01A4  3E03               	addlw	3
  1224  01A5  00A0               	movwf	??_medicion_presion
  1225  01A6  3000               	movlw	0
  1226  01A7  1803               	skipnc
  1227  01A8  3001               	movlw	1
  1228  01A9  00A1               	movwf	??_medicion_presion+1
  1229  01AA  0821               	movf	??_medicion_presion+1,w
  1230  01AB  3A80               	xorlw	128
  1231  01AC  00A2               	movwf	??_medicion_presion+2
  1232  01AD  3080               	movlw	128
  1233  01AE  0222               	subwf	??_medicion_presion+2,w
  1234  01AF  1D03               	skipz
  1235  01B0  29B3               	goto	u485
  1236  01B1  0824               	movf	medicion_presion@numero,w
  1237  01B2  0220               	subwf	??_medicion_presion,w
  1238  01B3                     u485:	
  1239  01B3  1803               	skipnc
  1240  01B4  29B9               	goto	l935
  1241                           
  1242                           ;picMotores.c: 41: objeto = 1;
  1243  01B5  1283               	bcf	3,5	;RP0=0, select bank0
  1244  01B6  1303               	bcf	3,6	;RP1=0, select bank0
  1245  01B7  01A3               	clrf	medicion_presion@objeto
  1246  01B8  0AA3               	incf	medicion_presion@objeto,f
  1247  01B9                     l935:	
  1248                           
  1249                           ;picMotores.c: 42: }
  1250                           ;picMotores.c: 43: if (numero < (presion_zero-6)){
  1251  01B9  0875               	movf	_presion_zero,w
  1252  01BA  3EFA               	addlw	250
  1253  01BB  1283               	bcf	3,5	;RP0=0, select bank0
  1254  01BC  1303               	bcf	3,6	;RP1=0, select bank0
  1255  01BD  00A0               	movwf	??_medicion_presion
  1256  01BE  30FF               	movlw	255
  1257  01BF  1803               	skipnc
  1258  01C0  3000               	movlw	0
  1259  01C1  00A1               	movwf	??_medicion_presion+1
  1260  01C2  0821               	movf	??_medicion_presion+1,w
  1261  01C3  3A80               	xorlw	128
  1262  01C4  3C80               	sublw	128
  1263  01C5  1D03               	skipz
  1264  01C6  29C9               	goto	u495
  1265  01C7  0820               	movf	??_medicion_presion,w
  1266  01C8  0224               	subwf	medicion_presion@numero,w
  1267  01C9                     u495:	
  1268  01C9  1803               	skipnc
  1269  01CA  29D1               	goto	l85
  1270                           
  1271                           ;picMotores.c: 44: objeto=2;
  1272  01CB  3002               	movlw	2
  1273  01CC  1283               	bcf	3,5	;RP0=0, select bank0
  1274  01CD  1303               	bcf	3,6	;RP1=0, select bank0
  1275  01CE  00A0               	movwf	??_medicion_presion
  1276  01CF  0820               	movf	??_medicion_presion,w
  1277  01D0  00A3               	movwf	medicion_presion@objeto
  1278  01D1                     l85:	
  1279                           
  1280                           ;picMotores.c: 45: }
  1281                           ;picMotores.c: 46: return objeto;
  1282  01D1  1283               	bcf	3,5	;RP0=0, select bank0
  1283  01D2  1303               	bcf	3,6	;RP1=0, select bank0
  1284  01D3  0823               	movf	medicion_presion@objeto,w
  1285  01D4  0008               	return
  1286  01D5                     __end_of_medicion_presion:	
  1287                           
  1288                           	psect	text6
  1289  0235                     __ptext6:	
  1290 ;; *************** function _calibracion_presion *****************
  1291 ;; Defined at:
  1292 ;;		line 49 in file "picMotores.c"
  1293 ;; Parameters:    Size  Location     Type
  1294 ;;		None
  1295 ;; Auto vars:     Size  Location     Type
  1296 ;;  numero          1    0[BANK0 ] unsigned char 
  1297 ;; Return value:  Size  Location     Type
  1298 ;;                  1    wreg      void 
  1299 ;; Registers used:
  1300 ;;		wreg, status,2
  1301 ;; Tracked objects:
  1302 ;;		On entry : 0/0
  1303 ;;		On exit  : 0/0
  1304 ;;		Unchanged: 0/0
  1305 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1306 ;;      Params:         0       0       0       0       0
  1307 ;;      Locals:         0       1       0       0       0
  1308 ;;      Temps:          1       0       0       0       0
  1309 ;;      Totals:         1       1       0       0       0
  1310 ;;Total ram usage:        2 bytes
  1311 ;; Hardware stack levels used:    1
  1312 ;; Hardware stack levels required when called:    1
  1313 ;; This function calls:
  1314 ;;		Nothing
  1315 ;; This function is called by:
  1316 ;;		_main
  1317 ;; This function uses a non-reentrant model
  1318 ;;
  1319                           
  1320                           
  1321                           ;psect for function _calibracion_presion
  1322  0235                     _calibracion_presion:	
  1323                           
  1324                           ;picMotores.c: 50: char numero=0;
  1325                           
  1326                           ;incstack = 0
  1327                           ; Regs used in _calibracion_presion: [wreg+status,2]
  1328  0235  1283               	bcf	3,5	;RP0=0, select bank0
  1329  0236  1303               	bcf	3,6	;RP1=0, select bank0
  1330  0237  01A0               	clrf	calibracion_presion@numero
  1331                           
  1332                           ;picMotores.c: 51: ADCON0bits.GO=1;
  1333  0238  149F               	bsf	31,1	;volatile
  1334  0239                     l90:	
  1335                           ;picMotores.c: 52: while(PIR1bits.ADIF==0){
  1336                           
  1337                           
  1338                           ;picMotores.c: 53: _delay((unsigned long)((1)*(500000/4000000.0)));
  1339  0239  1283               	bcf	3,5	;RP0=0, select bank0
  1340  023A  1303               	bcf	3,6	;RP1=0, select bank0
  1341  023B  1F0C               	btfss	12,6	;volatile
  1342  023C  2A39               	goto	l90
  1343                           
  1344                           ;picMotores.c: 54: }
  1345                           ;picMotores.c: 55: PIR1bits.ADIF=0;
  1346  023D  130C               	bcf	12,6	;volatile
  1347                           
  1348                           ;picMotores.c: 56: numero=ADRESH;
  1349  023E  081E               	movf	30,w	;volatile
  1350  023F  00F4               	movwf	??_calibracion_presion
  1351  0240  0874               	movf	??_calibracion_presion,w
  1352  0241  00A0               	movwf	calibracion_presion@numero
  1353                           
  1354                           ;picMotores.c: 57: presion_zero=numero;
  1355  0242  0820               	movf	calibracion_presion@numero,w
  1356  0243  00F4               	movwf	??_calibracion_presion
  1357  0244  0874               	movf	??_calibracion_presion,w
  1358  0245  00F5               	movwf	_presion_zero
  1359  0246  0008               	return
  1360  0247                     __end_of_calibracion_presion:	
  1361                           ;picMotores.c: 59: return;
  1362                           
  1363                           
  1364                           	psect	text7
  1365  0247                     __ptext7:	
  1366 ;; *************** function _ISR *****************
  1367 ;; Defined at:
  1368 ;;		line 143 in file "picMotores.c"
  1369 ;; Parameters:    Size  Location     Type
  1370 ;;		None
  1371 ;; Auto vars:     Size  Location     Type
  1372 ;;		None
  1373 ;; Return value:  Size  Location     Type
  1374 ;;                  1    wreg      void 
  1375 ;; Registers used:
  1376 ;;		None
  1377 ;; Tracked objects:
  1378 ;;		On entry : 0/0
  1379 ;;		On exit  : 0/0
  1380 ;;		Unchanged: 0/0
  1381 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1382 ;;      Params:         0       0       0       0       0
  1383 ;;      Locals:         0       0       0       0       0
  1384 ;;      Temps:          4       0       0       0       0
  1385 ;;      Totals:         4       0       0       0       0
  1386 ;;Total ram usage:        4 bytes
  1387 ;; Hardware stack levels used:    1
  1388 ;; This function calls:
  1389 ;;		Nothing
  1390 ;; This function is called by:
  1391 ;;		Interrupt level 1
  1392 ;; This function uses a non-reentrant model
  1393 ;;
  1394                           
  1395                           
  1396                           ;psect for function _ISR
  1397  0247                     _ISR:	
  1398  0247  0873               	movf	??_ISR+3,w
  1399  0248  00FF               	movwf	127
  1400  0249  0872               	movf	??_ISR+2,w
  1401  024A  008A               	movwf	10
  1402  024B  0871               	movf	??_ISR+1,w
  1403  024C  0084               	movwf	4
  1404  024D  0E70               	swapf	??_ISR^(0+-128),w
  1405  024E  0083               	movwf	3
  1406  024F  0EFE               	swapf	126,f
  1407  0250  0E7E               	swapf	126,w
  1408  0251  0009               	retfie
  1409  0252                     __end_of_ISR:	
  1410  007E                     btemp	set	126	;btemp
  1411  007E                     wtemp0	set	126
  1412                           
  1413                           	psect	intentry
  1414  0004                     __pintentry:	
  1415                           ;incstack = 0
  1416                           ; Regs used in _ISR: []
  1417                           
  1418  0004                     interrupt_function:	
  1419  007E                     saved_w	set	btemp
  1420  0004  00FE               	movwf	btemp
  1421  0005  0E03               	swapf	3,w
  1422  0006  00F0               	movwf	??_ISR
  1423  0007  0804               	movf	4,w
  1424  0008  00F1               	movwf	??_ISR+1
  1425  0009  080A               	movf	10,w
  1426  000A  00F2               	movwf	??_ISR+2
  1427  000B  1283               	bcf	3,5	;RP0=0, select bank0
  1428  000C  1303               	bcf	3,6	;RP1=0, select bank0
  1429  000D  087F               	movf	btemp+1,w
  1430  000E  00F3               	movwf	??_ISR+3
  1431  000F  120A  118A  2A47   	ljmp	_ISR


Data Sizes:
    Strings     0
    Constant    0
    Data        2
    BSS         6
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      5      10
    BANK0            80     10      13
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _main->_calibracion_presion
    _main->_stepper

Critical Paths under _ISR in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_move_pwmDC
    _move_servo->_servo
    _move_pwmDC->_medicion_presion

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0     190
                                              7 BANK0      3     3      0
                _calibracion_presion
                   _medicion_presion
                         _move_pwmDC
                         _move_servo
                              _servo
                            _stepper
 ---------------------------------------------------------------------------------
 (1) _stepper                                              3     3      0      24
                                              4 COMMON     1     1      0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _move_servo                                           2     2      0       0
                                              2 BANK0      2     2      0
                              _servo
 ---------------------------------------------------------------------------------
 (1) _servo                                                2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _move_pwmDC                                           2     2      0      71
                                              5 BANK0      2     2      0
                   _medicion_presion
 ---------------------------------------------------------------------------------
 (2) _medicion_presion                                     5     5      0      71
                                              0 BANK0      5     5      0
 ---------------------------------------------------------------------------------
 (1) _calibracion_presion                                  2     2      0      24
                                              4 COMMON     1     1      0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (3) _ISR                                                  4     4      0       0
                                              0 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _calibracion_presion
   _medicion_presion
   _move_pwmDC
     _medicion_presion
   _move_servo
     _servo
   _servo
   _stepper

 _ISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0       0       9        0.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0       0       7        0.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50      A       D       5       16.3%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      5       A       1       71.4%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      17      12        0.0%
ABS                  0      0      17       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V1.41 build -162212810 
Symbol Table                                                                                   Thu Jun 01 07:57:57 2017

                 __CFG_CP$OFF 0000                   _SSPSTATbits 0094                            l90 0239  
                          l82 019A                            l85 01D1                           _ADC 002B  
                         l935 01B9                           l975 0173                           l959 010D  
                         _PR2 0092                           u505 022D                  __CFG_CPD$OFF 0000  
                         _ISR 0247                           u485 01B3                           u495 01C9  
                         u575 01F2                           u807 0147                           u817 0163  
                         u827 0184                           u837 0207                           u757 0065  
                         u767 00B2                           u777 011A                           u787 0129  
                         u797 0138                           _vel 0078                           _pos 0079  
                         fsr0 0004         ??_calibracion_presion 0074                  __CFG_LVP$OFF 0000  
                        ?_ISR 0070                          l1001 01F9                          l1003 020D  
                        l1111 00FC                          l1105 00F0                          l1109 00F7  
                        l1071 0099                          l1047 006F                          l1073 00A6  
                        l1065 008B                          l1057 0080                          l1067 0094  
                        l1077 00BE                          l1085 00D0                          l1095 00E2  
                        l1079 00C8                  __CFG_WRT$OFF 0000                          _main 0029  
                        _giro 0077                          btemp 007E                          start 0012  
               __CFG_IESO$OFF 0000                 __CFG_MCLRE$ON 0000                         ??_ISR 0070  
                       ?_main 0070                 __CFG_WDTE$OFF 0000                         _ANSEL 0188  
                       _T2CON 0012                         _PORTA 0005                         _PORTB 0006  
                       _PORTD 0008                         _TRISA 0085                         _TRISB 0086  
                       _TRISC 0087                         _TRISD 0088                __CFG_FCMEN$OFF 0000  
                       _servo 0212                __CFG_BOREN$OFF 0000                         pclath 000A  
                       status 0003               __end_of_stepper 014F                         wtemp0 007E  
             __initialization 0015                  __end_of_main 0107                        ??_main 0027  
                      _ADCON0 001F                        _ADCON1 009F      __end_of_medicion_presion 01D5  
                      _ADRESH 001E                        _ADRESL 009E                        _CCPR1L 0015  
                      _CCPR2L 001B                        ?_servo 0070                        _ANSELH 0189  
                      _OSCCON 008F                        _SSPCON 0014                        _SSPBUF 0013  
              __CFG_PWRTE$OFF 0000                        _accion 0076                        _puerta 002C  
                __pdataCOMMON 0078                        saved_w 007E                     ??_stepper 0020  
     __end_of__initialization 0025     calibracion_presion@numero 0020                __pcstackCOMMON 0070  
               __end_of_servo 0235                       ??_servo 0020                    __pbssBANK0 002A  
                  __pmaintext 0029                    __pintentry 0004                       _CCP1CON 0017  
                     _CCP2CON 001D   __end_of_calibracion_presion 0247                       _SSPSTAT 0094  
                   _ANSELbits 0188                       __ptext1 0107                       __ptext2 014F  
                     __ptext3 0212                       __ptext4 01D5                       __ptext5 0195  
                     __ptext6 0235                       __ptext7 0247                  __size_of_ISR 000B  
                     _presion 002A                       _stepper 0107             ?_medicion_presion 0070  
        end_of_initialization 0025            ??_medicion_presion 0020                    _move_pwmDC 01D5  
                  _move_servo 014F                     _PORTCbits 0007        medicion_presion@objeto 0023  
      medicion_presion@numero 0024                   _CCP1CONbits 0017                   _CCP2CONbits 001D  
               __pidataCOMMON 0252           start_initialization 0015                   __end_of_ISR 0252  
    __CFG_FOSC$INTRC_NOCLKOUT 0000                   ?_move_pwmDC 0070                   ?_move_servo 0070  
                 __pbssCOMMON 0075                     ___latbits 0002                 __pcstackBANK0 0020  
         __size_of_move_pwmDC 003D           __size_of_move_servo 0046                      ?_stepper 0070  
__size_of_calibracion_presion 0012                __size_of_servo 0023             interrupt_function 0004  
                    _PIR1bits 000C     __size_of_medicion_presion 0040                    _ADCON0bits 001F  
           __CFG_BOR4V$BOR40V 0000              __size_of_stepper 0048                 __size_of_main 00DE  
                ??_move_pwmDC 0025                  ??_move_servo 0022            __end_of_move_pwmDC 0212  
          __end_of_move_servo 0195                      intlevel1 0000              _medicion_presion 0195  
         _calibracion_presion 0235                  _presion_zero 0075                      stepper@i 0074  
        ?_calibracion_presion 0070  
