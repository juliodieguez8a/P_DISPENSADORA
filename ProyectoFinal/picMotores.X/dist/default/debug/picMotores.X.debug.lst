

Microchip Technology PIC LITE Macro Assembler V1.41 build -162212810 
                                                                                               Thu Jun 01 02:03:46 2017

Microchip Technology Omniscient Code Generator v1.41 (Free mode) build 201701250102
     1                           	processor	16F887
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataCOMMON,global,class=CODE,delta=2
     5                           	psect	idataBANK0,global,class=CODE,delta=2
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	dataCOMMON,global,class=COMMON,space=1,delta=1
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	maintext,global,class=CODE,split=1,delta=2
    14                           	psect	text1,local,class=CODE,merge=1,delta=2
    15                           	psect	text2,local,class=CODE,merge=1,delta=2
    16                           	psect	text3,local,class=CODE,merge=1,delta=2
    17                           	psect	text4,local,class=CODE,merge=1,delta=2
    18                           	psect	text5,local,class=CODE,merge=1,delta=2
    19                           	psect	text6,local,class=CODE,merge=1,delta=2
    20                           	psect	text7,local,class=CODE,merge=1,delta=2
    21                           	psect	intentry,global,class=CODE,delta=2
    22                           	dabs	1,0x7E,2
    23  0000                     
    24                           ; Version 1.41
    25                           ; Generated 25/01/2017 GMT
    26                           ; 
    27                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    28                           ; All rights reserved.
    29                           ; 
    30                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    31                           ; 
    32                           ; Redistribution and use in source and binary forms, with or without modification, are
    33                           ; permitted provided that the following conditions are met:
    34                           ; 
    35                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    36                           ;        conditions and the following disclaimer.
    37                           ; 
    38                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    39                           ;        of conditions and the following disclaimer in the documentation and/or other
    40                           ;        materials provided with the distribution.
    41                           ; 
    42                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    43                           ;        software without specific prior written permission.
    44                           ; 
    45                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    46                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    47                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    48                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    49                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    50                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    51                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    52                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    53                           ; 
    54                           ; 
    55                           ; Code-generator required, PIC16F887 Definitions
    56                           ; 
    57                           ; SFR Addresses
    58  0000                     	;# 
    59  0001                     	;# 
    60  0002                     	;# 
    61  0003                     	;# 
    62  0004                     	;# 
    63  0005                     	;# 
    64  0006                     	;# 
    65  0007                     	;# 
    66  0008                     	;# 
    67  0009                     	;# 
    68  000A                     	;# 
    69  000B                     	;# 
    70  000C                     	;# 
    71  000D                     	;# 
    72  000E                     	;# 
    73  000E                     	;# 
    74  000F                     	;# 
    75  0010                     	;# 
    76  0011                     	;# 
    77  0012                     	;# 
    78  0013                     	;# 
    79  0014                     	;# 
    80  0015                     	;# 
    81  0015                     	;# 
    82  0016                     	;# 
    83  0017                     	;# 
    84  0018                     	;# 
    85  0019                     	;# 
    86  001A                     	;# 
    87  001B                     	;# 
    88  001B                     	;# 
    89  001C                     	;# 
    90  001D                     	;# 
    91  001E                     	;# 
    92  001F                     	;# 
    93  0081                     	;# 
    94  0085                     	;# 
    95  0086                     	;# 
    96  0087                     	;# 
    97  0088                     	;# 
    98  0089                     	;# 
    99  008C                     	;# 
   100  008D                     	;# 
   101  008E                     	;# 
   102  008F                     	;# 
   103  0090                     	;# 
   104  0091                     	;# 
   105  0092                     	;# 
   106  0093                     	;# 
   107  0093                     	;# 
   108  0093                     	;# 
   109  0094                     	;# 
   110  0095                     	;# 
   111  0096                     	;# 
   112  0097                     	;# 
   113  0098                     	;# 
   114  0099                     	;# 
   115  009A                     	;# 
   116  009B                     	;# 
   117  009C                     	;# 
   118  009D                     	;# 
   119  009E                     	;# 
   120  009F                     	;# 
   121  0105                     	;# 
   122  0107                     	;# 
   123  0108                     	;# 
   124  0109                     	;# 
   125  010C                     	;# 
   126  010C                     	;# 
   127  010D                     	;# 
   128  010E                     	;# 
   129  010F                     	;# 
   130  0185                     	;# 
   131  0187                     	;# 
   132  0188                     	;# 
   133  0189                     	;# 
   134  018C                     	;# 
   135  018D                     	;# 
   136                           
   137                           	psect	idataCOMMON
   138  022E                     __pidataCOMMON:	
   139                           
   140                           ;initializer for _pos
   141  022E  3414               	retlw	20
   142                           
   143                           	psect	idataBANK0
   144  022F                     __pidataBANK0:	
   145                           
   146                           ;initializer for _vel
   147  022F  3464               	retlw	100
   148  0013                     _SSPBUF	set	19
   149  001F                     _ADCON0	set	31
   150  000B                     _INTCONbits	set	11
   151  0014                     _SSPCON	set	20
   152  0012                     _T2CON	set	18
   153  001D                     _CCP2CON	set	29
   154  0005                     _PORTA	set	5
   155  001B                     _CCPR2L	set	27
   156  001D                     _CCP2CONbits	set	29
   157  0007                     _PORTCbits	set	7
   158  0015                     _CCPR1L	set	21
   159  0017                     _CCP1CONbits	set	23
   160  0017                     _CCP1CON	set	23
   161  0006                     _PORTB	set	6
   162  0008                     _PORTD	set	8
   163  001E                     _ADRESH	set	30
   164  000C                     _PIR1bits	set	12
   165  001F                     _ADCON0bits	set	31
   166  0094                     _SSPSTATbits	set	148
   167  009E                     _ADRESL	set	158
   168  009F                     _ADCON1	set	159
   169  008C                     _PIE1bits	set	140
   170  0094                     _SSPSTAT	set	148
   171  0092                     _PR2	set	146
   172  0088                     _TRISD	set	136
   173  0087                     _TRISC	set	135
   174  0086                     _TRISB	set	134
   175  0085                     _TRISA	set	133
   176  008F                     _OSCCON	set	143
   177  0188                     _ANSELbits	set	392
   178  0189                     _ANSELH	set	393
   179  0188                     _ANSEL	set	392
   180                           
   181                           ; #config settings
   182  0000                     
   183                           	psect	cinit
   184  0015                     start_initialization:	
   185  0015                     __initialization:	
   186                           
   187                           ; Initialize objects allocated to BANK0
   188  0015  120A  118A  222F  120A  118A  	fcall	__pidataBANK0	;fetch initializer
   189  001A  00AC               	movwf	__pdataBANK0& (0+127)
   190                           
   191                           ; Initialize objects allocated to COMMON
   192  001B  120A  118A  222E   	fcall	__pidataCOMMON	;fetch initializer
   193  001E  00F9               	movwf	__pdataCOMMON& (0+127)
   194                           
   195                           ; Clear objects allocated to BANK0
   196  001F  01AA               	clrf	__pbssBANK0& (0+127)
   197  0020  01AB               	clrf	(__pbssBANK0+1)& (0+127)
   198                           
   199                           ; Clear objects allocated to COMMON
   200  0021  01F5               	clrf	__pbssCOMMON& (0+127)
   201  0022  01F6               	clrf	(__pbssCOMMON+1)& (0+127)
   202  0023  01F7               	clrf	(__pbssCOMMON+2)& (0+127)
   203  0024  01F8               	clrf	(__pbssCOMMON+3)& (0+127)
   204  0025                     end_of_initialization:	
   205                           ;End of C runtime variable initialization code
   206                           
   207  0025                     __end_of__initialization:	
   208  0025  0183               	clrf	3
   209  0026  120A  118A  2829   	ljmp	_main	;jump to C main() function
   210                           
   211                           	psect	bssCOMMON
   212  0075                     __pbssCOMMON:	
   213  0075                     _presion:	
   214  0075                     	ds	1
   215  0076                     _accion:	
   216  0076                     	ds	1
   217  0077                     _giro:	
   218  0077                     	ds	1
   219  0078                     _puerta:	
   220  0078                     	ds	1
   221                           
   222                           	psect	dataCOMMON
   223  0079                     __pdataCOMMON:	
   224  0079                     _pos:	
   225  0079                     	ds	1
   226                           
   227                           	psect	bssBANK0
   228  002A                     __pbssBANK0:	
   229  002A                     _presion_zero:	
   230  002A                     	ds	1
   231  002B                     _ADC:	
   232  002B                     	ds	1
   233                           
   234                           	psect	dataBANK0
   235  002C                     __pdataBANK0:	
   236  002C                     _vel:	
   237  002C                     	ds	1
   238                           
   239                           	psect	cstackCOMMON
   240  0070                     __pcstackCOMMON:	
   241  0070                     ?_medicion_presion:	
   242  0070                     ?_calibracion_presion:	
   243                           ; 1 bytes @ 0x0
   244                           
   245  0070                     ?_stepper:	
   246                           ; 1 bytes @ 0x0
   247                           
   248  0070                     ?_move_pwmDC:	
   249                           ; 1 bytes @ 0x0
   250                           
   251  0070                     ?_servo:	
   252                           ; 1 bytes @ 0x0
   253                           
   254  0070                     ?_move_servo:	
   255                           ; 1 bytes @ 0x0
   256                           
   257  0070                     ?_ISR:	
   258                           ; 1 bytes @ 0x0
   259                           
   260  0070                     ??_ISR:	
   261                           ; 1 bytes @ 0x0
   262                           
   263  0070                     ?_main:	
   264                           ; 1 bytes @ 0x0
   265                           
   266                           
   267                           ; 1 bytes @ 0x0
   268  0070                     	ds	5
   269                           
   270                           	psect	cstackBANK0
   271  0020                     __pcstackBANK0:	
   272  0020                     ??_medicion_presion:	
   273  0020                     ??_calibracion_presion:	
   274                           ; 1 bytes @ 0x0
   275                           
   276  0020                     ??_stepper:	
   277                           ; 1 bytes @ 0x0
   278                           
   279  0020                     ??_servo:	
   280                           ; 1 bytes @ 0x0
   281                           
   282                           
   283                           ; 1 bytes @ 0x0
   284  0020                     	ds	1
   285  0021                     calibracion_presion@numero:	
   286                           
   287                           ; 1 bytes @ 0x1
   288  0021                     	ds	1
   289  0022                     ??_move_servo:	
   290  0022                     stepper@i:	
   291                           ; 1 bytes @ 0x2
   292                           
   293                           
   294                           ; 1 bytes @ 0x2
   295  0022                     	ds	1
   296  0023                     medicion_presion@numero:	
   297                           
   298                           ; 1 bytes @ 0x3
   299  0023                     	ds	1
   300  0024                     medicion_presion@objeto:	
   301                           
   302                           ; 1 bytes @ 0x4
   303  0024                     	ds	1
   304  0025                     ??_move_pwmDC:	
   305                           
   306                           ; 1 bytes @ 0x5
   307  0025                     	ds	2
   308  0027                     ??_main:	
   309                           
   310                           ; 1 bytes @ 0x7
   311  0027                     	ds	3
   312                           
   313                           	psect	maintext
   314  0029                     __pmaintext:	
   315 ;;
   316 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   317 ;;
   318 ;; *************** function _main *****************
   319 ;; Defined at:
   320 ;;		line 150 in file "picMotores.c"
   321 ;; Parameters:    Size  Location     Type
   322 ;;		None
   323 ;; Auto vars:     Size  Location     Type
   324 ;;		None
   325 ;; Return value:  Size  Location     Type
   326 ;;                  1    wreg      void 
   327 ;; Registers used:
   328 ;;		wreg, status,2, status,0, pclath, cstack
   329 ;; Tracked objects:
   330 ;;		On entry : B00/0
   331 ;;		On exit  : 0/0
   332 ;;		Unchanged: 0/0
   333 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   334 ;;      Params:         0       0       0       0       0
   335 ;;      Locals:         0       0       0       0       0
   336 ;;      Temps:          0       3       0       0       0
   337 ;;      Totals:         0       3       0       0       0
   338 ;;Total ram usage:        3 bytes
   339 ;; Hardware stack levels required when called:    3
   340 ;; This function calls:
   341 ;;		_calibracion_presion
   342 ;;		_medicion_presion
   343 ;;		_move_pwmDC
   344 ;;		_move_servo
   345 ;;		_servo
   346 ;;		_stepper
   347 ;; This function is called by:
   348 ;;		Startup code after reset
   349 ;; This function uses a non-reentrant model
   350 ;;
   351                           
   352                           
   353                           ;psect for function _main
   354  0029                     _main:	
   355                           
   356                           ;picMotores.c: 152: OSCCON = 0b00111100;
   357                           
   358                           ;incstack = 0
   359                           ; Regs used in _main: [wreg+status,2+status,0+pclath+cstack]
   360  0029  303C               	movlw	60
   361  002A  1683               	bsf	3,5	;RP0=1, select bank1
   362  002B  1303               	bcf	3,6	;RP1=0, select bank1
   363  002C  008F               	movwf	15	;volatile
   364                           
   365                           ;picMotores.c: 155: ANSEL=0;
   366  002D  1683               	bsf	3,5	;RP0=1, select bank3
   367  002E  1703               	bsf	3,6	;RP1=1, select bank3
   368  002F  0188               	clrf	8	;volatile
   369                           
   370                           ;picMotores.c: 156: ANSELH=0;
   371  0030  0189               	clrf	9	;volatile
   372                           
   373                           ;picMotores.c: 157: ANSELbits.ANS0;
   374  0031  0808               	movf	8,w	;volatile
   375                           
   376                           ;picMotores.c: 160: TRISA=0b00000001;
   377  0032  3001               	movlw	1
   378  0033  1683               	bsf	3,5	;RP0=1, select bank1
   379  0034  1303               	bcf	3,6	;RP1=0, select bank1
   380  0035  0085               	movwf	5	;volatile
   381                           
   382                           ;picMotores.c: 161: TRISB=0b11110000;
   383  0036  30F0               	movlw	240
   384  0037  0086               	movwf	6	;volatile
   385                           
   386                           ;picMotores.c: 162: TRISC=0b11011001;
   387  0038  30D9               	movlw	217
   388  0039  0087               	movwf	7	;volatile
   389                           
   390                           ;picMotores.c: 163: TRISD=0;
   391  003A  0188               	clrf	8	;volatile
   392                           
   393                           ;picMotores.c: 166: PORTA=0;
   394  003B  1283               	bcf	3,5	;RP0=0, select bank0
   395  003C  1303               	bcf	3,6	;RP1=0, select bank0
   396  003D  0185               	clrf	5	;volatile
   397                           
   398                           ;picMotores.c: 167: PORTB=0b1001;
   399  003E  3009               	movlw	9
   400  003F  0086               	movwf	6	;volatile
   401                           
   402                           ;picMotores.c: 168: PORTCbits.RC2=0;
   403  0040  1107               	bcf	7,2	;volatile
   404                           
   405                           ;picMotores.c: 169: PORTCbits.RC1=0;
   406  0041  1087               	bcf	7,1	;volatile
   407                           
   408                           ;picMotores.c: 172: CCP2CON=0b00001111;
   409  0042  300F               	movlw	15
   410  0043  009D               	movwf	29	;volatile
   411                           
   412                           ;picMotores.c: 173: servo();
   413  0044  120A  118A  21DE  120A  118A  	fcall	_servo
   414                           
   415                           ;picMotores.c: 175: PR2=155;
   416  0049  309B               	movlw	155
   417  004A  1683               	bsf	3,5	;RP0=1, select bank1
   418  004B  1303               	bcf	3,6	;RP1=0, select bank1
   419  004C  0092               	movwf	18	;volatile
   420                           
   421                           ;picMotores.c: 176: T2CON = 0b00000111;
   422  004D  3007               	movlw	7
   423  004E  1283               	bcf	3,5	;RP0=0, select bank0
   424  004F  1303               	bcf	3,6	;RP1=0, select bank0
   425  0050  0092               	movwf	18	;volatile
   426                           
   427                           ;picMotores.c: 177: PIR1bits.TMR2IF = 0;
   428  0051  108C               	bcf	12,1	;volatile
   429                           
   430                           ;picMotores.c: 181: SSPSTAT=0b01000000;
   431  0052  3040               	movlw	64
   432  0053  1683               	bsf	3,5	;RP0=1, select bank1
   433  0054  1303               	bcf	3,6	;RP1=0, select bank1
   434  0055  0094               	movwf	20	;volatile
   435                           
   436                           ;picMotores.c: 183: SSPCON=0b00110100;
   437  0056  3034               	movlw	52
   438  0057  1283               	bcf	3,5	;RP0=0, select bank0
   439  0058  1303               	bcf	3,6	;RP1=0, select bank0
   440  0059  0094               	movwf	20	;volatile
   441                           
   442                           ;picMotores.c: 186: INTCONbits.GIE=1;
   443  005A  178B               	bsf	11,7	;volatile
   444                           
   445                           ;picMotores.c: 187: INTCONbits.PEIE=1;
   446  005B  170B               	bsf	11,6	;volatile
   447                           
   448                           ;picMotores.c: 188: PIE1bits.ADIE=1; ;
   449  005C  1683               	bsf	3,5	;RP0=1, select bank1
   450  005D  1303               	bcf	3,6	;RP1=0, select bank1
   451  005E  170C               	bsf	12,6	;volatile
   452                           
   453                           ;picMotores.c: 191: ADCON1=0b00000000;
   454  005F  019F               	clrf	31	;volatile
   455                           
   456                           ;picMotores.c: 192: ADCON0=0b11000001;
   457  0060  30C1               	movlw	193
   458  0061  1283               	bcf	3,5	;RP0=0, select bank0
   459  0062  1303               	bcf	3,6	;RP1=0, select bank0
   460  0063  009F               	movwf	31	;volatile
   461                           
   462                           ;picMotores.c: 193: _delay((unsigned long)((1)*(500000/4000.0)));
   463  0064  3028               	movlw	40
   464  0065  1283               	bcf	3,5	;RP0=0, select bank0
   465  0066  1303               	bcf	3,6	;RP1=0, select bank0
   466  0067  00A7               	movwf	??_main
   467  0068                     u757:	
   468  0068  0BA7               	decfsz	??_main,f
   469  0069  2868               	goto	u757
   470  006A  286B               	nop2
   471                           
   472                           ;picMotores.c: 194: ADRESL=0;
   473  006B  1683               	bsf	3,5	;RP0=1, select bank1
   474  006C  1303               	bcf	3,6	;RP1=0, select bank1
   475  006D  019E               	clrf	30	;volatile
   476                           
   477                           ;picMotores.c: 195: ADRESH=0;
   478  006E  1283               	bcf	3,5	;RP0=0, select bank0
   479  006F  1303               	bcf	3,6	;RP1=0, select bank0
   480  0070  019E               	clrf	30	;volatile
   481                           
   482                           ;picMotores.c: 197: giro=0;
   483  0071  01F7               	clrf	_giro
   484  0072                     l1086:	
   485                           ;picMotores.c: 199: while(1){
   486                           
   487                           
   488                           ;picMotores.c: 201: calibracion_presion();
   489  0072  120A  118A  221A  120A  118A  	fcall	_calibracion_presion
   490                           
   491                           ;picMotores.c: 202: presion = medicion_presion();
   492  0077  120A  118A  21B6  120A  118A  	fcall	_medicion_presion
   493  007C  1283               	bcf	3,5	;RP0=0, select bank0
   494  007D  1303               	bcf	3,6	;RP1=0, select bank0
   495  007E  00A7               	movwf	??_main
   496  007F  0827               	movf	??_main,w
   497  0080  00F5               	movwf	_presion
   498                           
   499                           ;picMotores.c: 205: if (accion==1){
   500  0081  0376               	decf	_accion,w
   501  0082  1D03               	btfss	3,2
   502  0083  288D               	goto	l1098
   503                           
   504                           ;picMotores.c: 209: stepper();
   505  0084  120A  118A  20E7  120A  118A  	fcall	_stepper
   506                           
   507                           ;picMotores.c: 210: if (accion==1){accion=0;}
   508  0089  0376               	decf	_accion,w
   509  008A  1D03               	btfss	3,2
   510  008B  288D               	goto	l1098
   511  008C  01F6               	clrf	_accion
   512  008D                     l1098:	
   513                           
   514                           ;picMotores.c: 211: }
   515                           ;picMotores.c: 213: if (accion==2){
   516  008D  3002               	movlw	2
   517  008E  0676               	xorwf	_accion,w
   518  008F  1D03               	btfss	3,2
   519  0090  289A               	goto	l1106
   520                           
   521                           ;picMotores.c: 215: move_pwmDC();
   522  0091  120A  118A  2175  120A  118A  	fcall	_move_pwmDC
   523                           
   524                           ;picMotores.c: 216: if (accion==2){accion=0;}
   525  0096  3002               	movlw	2
   526  0097  0676               	xorwf	_accion,w
   527  0098  1903               	btfsc	3,2
   528  0099  01F6               	clrf	_accion
   529  009A                     l1106:	
   530                           
   531                           ;picMotores.c: 217: }
   532                           ;picMotores.c: 219: if ((accion==4&pos==20)|(presion!=1)){
   533  009A  3004               	movlw	4
   534  009B  0676               	xorwf	_accion,w
   535  009C  1D03               	btfss	3,2
   536  009D  28A2               	goto	l1110
   537  009E  3014               	movlw	20
   538  009F  0679               	xorwf	_pos,w
   539  00A0  1903               	btfsc	3,2
   540  00A1  28A5               	goto	l1112
   541  00A2                     l1110:	
   542  00A2  0375               	decf	_presion,w
   543  00A3  1903               	btfsc	3,2
   544  00A4  28B9               	goto	l1120
   545  00A5                     l1112:	
   546                           
   547                           ;picMotores.c: 221: _delay((unsigned long)((6000)*(500000/4000.0)));
   548  00A5  3004               	movlw	4
   549  00A6  1283               	bcf	3,5	;RP0=0, select bank0
   550  00A7  1303               	bcf	3,6	;RP1=0, select bank0
   551  00A8  00A9               	movwf	??_main+2
   552  00A9  30CF               	movlw	207
   553  00AA  00A8               	movwf	??_main+1
   554  00AB  3001               	movlw	1
   555  00AC  00A7               	movwf	??_main
   556  00AD                     u767:	
   557  00AD  0BA7               	decfsz	??_main,f
   558  00AE  28AD               	goto	u767
   559  00AF  0BA8               	decfsz	??_main+1,f
   560  00B0  28AD               	goto	u767
   561  00B1  0BA9               	decfsz	??_main+2,f
   562  00B2  28AD               	goto	u767
   563                           
   564                           ;picMotores.c: 222: giro=1;
   565  00B3  01F7               	clrf	_giro
   566  00B4  0AF7               	incf	_giro,f
   567                           
   568                           ;picMotores.c: 223: if (accion==3){accion=0;}
   569  00B5  3003               	movlw	3
   570  00B6  0676               	xorwf	_accion,w
   571  00B7  1903               	btfsc	3,2
   572  00B8  01F6               	clrf	_accion
   573  00B9                     l1120:	
   574                           
   575                           ;picMotores.c: 224: }
   576                           ;picMotores.c: 226: if ((accion==3&pos==77)|(presion==1)){
   577  00B9  3003               	movlw	3
   578  00BA  0676               	xorwf	_accion,w
   579  00BB  1D03               	btfss	3,2
   580  00BC  28C1               	goto	l1124
   581  00BD  304D               	movlw	77
   582  00BE  0679               	xorwf	_pos,w
   583  00BF  1903               	btfsc	3,2
   584  00C0  28C4               	goto	l1126
   585  00C1                     l1124:	
   586  00C1  0375               	decf	_presion,w
   587  00C2  1D03               	btfss	3,2
   588  00C3  28CE               	goto	l1132
   589  00C4                     l1126:	
   590                           
   591                           ;picMotores.c: 228: giro=2;
   592  00C4  3002               	movlw	2
   593  00C5  1283               	bcf	3,5	;RP0=0, select bank0
   594  00C6  1303               	bcf	3,6	;RP1=0, select bank0
   595  00C7  00A7               	movwf	??_main
   596  00C8  0827               	movf	??_main,w
   597  00C9  00F7               	movwf	_giro
   598                           
   599                           ;picMotores.c: 229: if (accion==3){accion=0;}
   600  00CA  3003               	movlw	3
   601  00CB  0676               	xorwf	_accion,w
   602  00CC  1903               	btfsc	3,2
   603  00CD  01F6               	clrf	_accion
   604  00CE                     l1132:	
   605                           
   606                           ;picMotores.c: 230: }
   607                           ;picMotores.c: 232: if (giro==1|giro==2){
   608  00CE  0377               	decf	_giro,w
   609  00CF  1903               	btfsc	3,2
   610  00D0  28D5               	goto	l1136
   611  00D1  3002               	movlw	2
   612  00D2  0677               	xorwf	_giro,w
   613  00D3  1D03               	btfss	3,2
   614  00D4  28DA               	goto	l1138
   615  00D5                     l1136:	
   616                           
   617                           ;picMotores.c: 234: move_servo();
   618  00D5  120A  118A  212F  120A  118A  	fcall	_move_servo
   619  00DA                     l1138:	
   620                           
   621                           ;picMotores.c: 235: }
   622                           ;picMotores.c: 238: if (SSPSTATbits.BF==1){
   623  00DA  1683               	bsf	3,5	;RP0=1, select bank1
   624  00DB  1303               	bcf	3,6	;RP1=0, select bank1
   625  00DC  1C14               	btfss	20,0	;volatile
   626  00DD  2872               	goto	l1086
   627                           
   628                           ;picMotores.c: 239: accion=SSPBUF;
   629  00DE  1283               	bcf	3,5	;RP0=0, select bank0
   630  00DF  1303               	bcf	3,6	;RP1=0, select bank0
   631  00E0  0813               	movf	19,w	;volatile
   632  00E1  00A7               	movwf	??_main
   633  00E2  0827               	movf	??_main,w
   634  00E3  00F6               	movwf	_accion
   635                           
   636                           ;picMotores.c: 240: PORTD=accion;
   637  00E4  0876               	movf	_accion,w
   638  00E5  0088               	movwf	8	;volatile
   639  00E6  2872               	goto	l1086
   640  00E7                     __end_of_main:	
   641                           
   642                           	psect	text1
   643  00E7                     __ptext1:	
   644 ;; *************** function _stepper *****************
   645 ;; Defined at:
   646 ;;		line 59 in file "picMotores.c"
   647 ;; Parameters:    Size  Location     Type
   648 ;;		None
   649 ;; Auto vars:     Size  Location     Type
   650 ;;  i               1    2[BANK0 ] unsigned char 
   651 ;; Return value:  Size  Location     Type
   652 ;;                  1    wreg      void 
   653 ;; Registers used:
   654 ;;		wreg, status,2, status,0
   655 ;; Tracked objects:
   656 ;;		On entry : 0/0
   657 ;;		On exit  : 0/0
   658 ;;		Unchanged: 0/0
   659 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   660 ;;      Params:         0       0       0       0       0
   661 ;;      Locals:         0       1       0       0       0
   662 ;;      Temps:          0       2       0       0       0
   663 ;;      Totals:         0       3       0       0       0
   664 ;;Total ram usage:        3 bytes
   665 ;; Hardware stack levels used:    1
   666 ;; Hardware stack levels required when called:    1
   667 ;; This function calls:
   668 ;;		Nothing
   669 ;; This function is called by:
   670 ;;		_main
   671 ;; This function uses a non-reentrant model
   672 ;;
   673                           
   674                           
   675                           ;psect for function _stepper
   676  00E7                     _stepper:	
   677                           
   678                           ;picMotores.c: 60: char i=3;
   679                           
   680                           ;incstack = 0
   681                           ; Regs used in _stepper: [wreg+status,2+status,0]
   682  00E7  3003               	movlw	3
   683  00E8  1283               	bcf	3,5	;RP0=0, select bank0
   684  00E9  1303               	bcf	3,6	;RP1=0, select bank0
   685  00EA  00A0               	movwf	??_stepper
   686  00EB  0820               	movf	??_stepper,w
   687  00EC  00A2               	movwf	stepper@i
   688  00ED                     l990:	
   689                           ;picMotores.c: 61: while (i!=0){
   690                           
   691  00ED  0822               	movf	stepper@i,w
   692  00EE  1903               	btfsc	3,2
   693  00EF  0008               	return
   694                           
   695                           ;picMotores.c: 62: PORTB=0b0011;
   696  00F0  3003               	movlw	3
   697  00F1  0086               	movwf	6	;volatile
   698                           
   699                           ;picMotores.c: 63: _delay((unsigned long)((200)*(500000/4000.0)));
   700  00F2  3021               	movlw	33
   701  00F3  1283               	bcf	3,5	;RP0=0, select bank0
   702  00F4  1303               	bcf	3,6	;RP1=0, select bank0
   703  00F5  00A1               	movwf	??_stepper+1
   704  00F6  3075               	movlw	117
   705  00F7  00A0               	movwf	??_stepper
   706  00F8                     u777:	
   707  00F8  0BA0               	decfsz	??_stepper,f
   708  00F9  28F8               	goto	u777
   709  00FA  0BA1               	decfsz	??_stepper+1,f
   710  00FB  28F8               	goto	u777
   711  00FC  28FD               	nop2
   712                           
   713                           ;picMotores.c: 64: PORTB=0b0110;
   714  00FD  3006               	movlw	6
   715  00FE  1283               	bcf	3,5	;RP0=0, select bank0
   716  00FF  1303               	bcf	3,6	;RP1=0, select bank0
   717  0100  0086               	movwf	6	;volatile
   718                           
   719                           ;picMotores.c: 65: _delay((unsigned long)((200)*(500000/4000.0)));
   720  0101  3021               	movlw	33
   721  0102  1283               	bcf	3,5	;RP0=0, select bank0
   722  0103  1303               	bcf	3,6	;RP1=0, select bank0
   723  0104  00A1               	movwf	??_stepper+1
   724  0105  3075               	movlw	117
   725  0106  00A0               	movwf	??_stepper
   726  0107                     u787:	
   727  0107  0BA0               	decfsz	??_stepper,f
   728  0108  2907               	goto	u787
   729  0109  0BA1               	decfsz	??_stepper+1,f
   730  010A  2907               	goto	u787
   731  010B  290C               	nop2
   732                           
   733                           ;picMotores.c: 66: PORTB=0b1100;
   734  010C  300C               	movlw	12
   735  010D  1283               	bcf	3,5	;RP0=0, select bank0
   736  010E  1303               	bcf	3,6	;RP1=0, select bank0
   737  010F  0086               	movwf	6	;volatile
   738                           
   739                           ;picMotores.c: 67: _delay((unsigned long)((200)*(500000/4000.0)));
   740  0110  3021               	movlw	33
   741  0111  1283               	bcf	3,5	;RP0=0, select bank0
   742  0112  1303               	bcf	3,6	;RP1=0, select bank0
   743  0113  00A1               	movwf	??_stepper+1
   744  0114  3075               	movlw	117
   745  0115  00A0               	movwf	??_stepper
   746  0116                     u797:	
   747  0116  0BA0               	decfsz	??_stepper,f
   748  0117  2916               	goto	u797
   749  0118  0BA1               	decfsz	??_stepper+1,f
   750  0119  2916               	goto	u797
   751  011A  291B               	nop2
   752                           
   753                           ;picMotores.c: 68: PORTB=0b1001;
   754  011B  3009               	movlw	9
   755  011C  1283               	bcf	3,5	;RP0=0, select bank0
   756  011D  1303               	bcf	3,6	;RP1=0, select bank0
   757  011E  0086               	movwf	6	;volatile
   758                           
   759                           ;picMotores.c: 69: _delay((unsigned long)((200)*(500000/4000.0)));
   760  011F  3021               	movlw	33
   761  0120  1283               	bcf	3,5	;RP0=0, select bank0
   762  0121  1303               	bcf	3,6	;RP1=0, select bank0
   763  0122  00A1               	movwf	??_stepper+1
   764  0123  3075               	movlw	117
   765  0124  00A0               	movwf	??_stepper
   766  0125                     u807:	
   767  0125  0BA0               	decfsz	??_stepper,f
   768  0126  2925               	goto	u807
   769  0127  0BA1               	decfsz	??_stepper+1,f
   770  0128  2925               	goto	u807
   771  0129  292A               	nop2
   772                           
   773                           ;picMotores.c: 70: i--;
   774  012A  3001               	movlw	1
   775  012B  1283               	bcf	3,5	;RP0=0, select bank0
   776  012C  1303               	bcf	3,6	;RP1=0, select bank0
   777  012D  02A2               	subwf	stepper@i,f
   778  012E  28ED               	goto	l990
   779  012F                     __end_of_stepper:	
   780                           ;picMotores.c: 71: }
   781                           ;picMotores.c: 73: return;
   782                           
   783                           
   784                           	psect	text2
   785  012F                     __ptext2:	
   786 ;; *************** function _move_servo *****************
   787 ;; Defined at:
   788 ;;		line 116 in file "picMotores.c"
   789 ;; Parameters:    Size  Location     Type
   790 ;;		None
   791 ;; Auto vars:     Size  Location     Type
   792 ;;		None
   793 ;; Return value:  Size  Location     Type
   794 ;;                  1    wreg      void 
   795 ;; Registers used:
   796 ;;		wreg, status,2, status,0, pclath, cstack
   797 ;; Tracked objects:
   798 ;;		On entry : 0/0
   799 ;;		On exit  : 0/0
   800 ;;		Unchanged: 0/0
   801 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   802 ;;      Params:         0       0       0       0       0
   803 ;;      Locals:         0       0       0       0       0
   804 ;;      Temps:          0       2       0       0       0
   805 ;;      Totals:         0       2       0       0       0
   806 ;;Total ram usage:        2 bytes
   807 ;; Hardware stack levels used:    1
   808 ;; Hardware stack levels required when called:    2
   809 ;; This function calls:
   810 ;;		_servo
   811 ;; This function is called by:
   812 ;;		_main
   813 ;; This function uses a non-reentrant model
   814 ;;
   815                           
   816                           
   817                           ;psect for function _move_servo
   818  012F                     _move_servo:	
   819                           
   820                           ;picMotores.c: 117: if (giro==1){
   821                           
   822                           ;incstack = 0
   823                           ; Regs used in _move_servo: [wreg+status,2+status,0+pclath+cstack]
   824  012F  0377               	decf	_giro,w
   825  0130  1D03               	btfss	3,2
   826  0131  2953               	goto	l1026
   827                           
   828                           ;picMotores.c: 118: pos++;
   829  0132  3001               	movlw	1
   830  0133  1283               	bcf	3,5	;RP0=0, select bank0
   831  0134  1303               	bcf	3,6	;RP1=0, select bank0
   832  0135  00A2               	movwf	??_move_servo
   833  0136  0822               	movf	??_move_servo,w
   834  0137  07F9               	addwf	_pos,f
   835                           
   836                           ;picMotores.c: 119: servo();
   837  0138  120A  118A  21DE  120A  118A  	fcall	_servo
   838                           
   839                           ;picMotores.c: 120: _delay((unsigned long)((100)*(500000/4000.0)));
   840  013D  3011               	movlw	17
   841  013E  1283               	bcf	3,5	;RP0=0, select bank0
   842  013F  1303               	bcf	3,6	;RP1=0, select bank0
   843  0140  00A3               	movwf	??_move_servo+1
   844  0141  3039               	movlw	57
   845  0142  00A2               	movwf	??_move_servo
   846  0143                     u817:	
   847  0143  0BA2               	decfsz	??_move_servo,f
   848  0144  2943               	goto	u817
   849  0145  0BA3               	decfsz	??_move_servo+1,f
   850  0146  2943               	goto	u817
   851  0147  2948               	nop2
   852                           
   853                           ;picMotores.c: 121: if(pos==78){
   854  0148  304E               	movlw	78
   855  0149  0679               	xorwf	_pos,w
   856  014A  1D03               	btfss	3,2
   857  014B  2953               	goto	l1026
   858                           
   859                           ;picMotores.c: 122: giro=0;
   860  014C  01F7               	clrf	_giro
   861                           
   862                           ;picMotores.c: 123: pos=77;
   863  014D  304D               	movlw	77
   864  014E  1283               	bcf	3,5	;RP0=0, select bank0
   865  014F  1303               	bcf	3,6	;RP1=0, select bank0
   866  0150  00A2               	movwf	??_move_servo
   867  0151  0822               	movf	??_move_servo,w
   868  0152  00F9               	movwf	_pos
   869  0153                     l1026:	
   870                           
   871                           ;picMotores.c: 124: }
   872                           ;picMotores.c: 125: }
   873                           ;picMotores.c: 126: if (giro==2){
   874  0153  3002               	movlw	2
   875  0154  0677               	xorwf	_giro,w
   876  0155  1D03               	btfss	3,2
   877  0156  0008               	return
   878                           
   879                           ;picMotores.c: 127: pos--;
   880  0157  3001               	movlw	1
   881  0158  02F9               	subwf	_pos,f
   882                           
   883                           ;picMotores.c: 128: servo();
   884  0159  120A  118A  21DE  120A  118A  	fcall	_servo
   885                           
   886                           ;picMotores.c: 129: _delay((unsigned long)((100)*(500000/4000.0)));
   887  015E  3011               	movlw	17
   888  015F  1283               	bcf	3,5	;RP0=0, select bank0
   889  0160  1303               	bcf	3,6	;RP1=0, select bank0
   890  0161  00A3               	movwf	??_move_servo+1
   891  0162  3039               	movlw	57
   892  0163  00A2               	movwf	??_move_servo
   893  0164                     u827:	
   894  0164  0BA2               	decfsz	??_move_servo,f
   895  0165  2964               	goto	u827
   896  0166  0BA3               	decfsz	??_move_servo+1,f
   897  0167  2964               	goto	u827
   898  0168  2969               	nop2
   899                           
   900                           ;picMotores.c: 130: if(pos==19){
   901  0169  3013               	movlw	19
   902  016A  0679               	xorwf	_pos,w
   903  016B  1D03               	btfss	3,2
   904  016C  0008               	return
   905                           
   906                           ;picMotores.c: 131: giro=0;
   907  016D  01F7               	clrf	_giro
   908                           
   909                           ;picMotores.c: 132: pos=20;
   910  016E  3014               	movlw	20
   911  016F  1283               	bcf	3,5	;RP0=0, select bank0
   912  0170  1303               	bcf	3,6	;RP1=0, select bank0
   913  0171  00A2               	movwf	??_move_servo
   914  0172  0822               	movf	??_move_servo,w
   915  0173  00F9               	movwf	_pos
   916  0174  0008               	return
   917  0175                     __end_of_move_servo:	
   918                           ;picMotores.c: 133: }
   919                           ;picMotores.c: 134: }
   920                           ;picMotores.c: 135: return;
   921                           
   922                           
   923                           	psect	text3
   924  01DE                     __ptext3:	
   925 ;; *************** function _servo *****************
   926 ;; Defined at:
   927 ;;		line 109 in file "picMotores.c"
   928 ;; Parameters:    Size  Location     Type
   929 ;;		None
   930 ;; Auto vars:     Size  Location     Type
   931 ;;		None
   932 ;; Return value:  Size  Location     Type
   933 ;;                  1    wreg      void 
   934 ;; Registers used:
   935 ;;		wreg, status,2, status,0
   936 ;; Tracked objects:
   937 ;;		On entry : 0/0
   938 ;;		On exit  : 0/0
   939 ;;		Unchanged: 0/0
   940 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   941 ;;      Params:         0       0       0       0       0
   942 ;;      Locals:         0       0       0       0       0
   943 ;;      Temps:          0       2       0       0       0
   944 ;;      Totals:         0       2       0       0       0
   945 ;;Total ram usage:        2 bytes
   946 ;; Hardware stack levels used:    1
   947 ;; Hardware stack levels required when called:    1
   948 ;; This function calls:
   949 ;;		Nothing
   950 ;; This function is called by:
   951 ;;		_move_servo
   952 ;;		_main
   953 ;; This function uses a non-reentrant model
   954 ;;
   955                           
   956                           
   957                           ;psect for function _servo
   958  01DE                     _servo:	
   959                           
   960                           ;picMotores.c: 110: CCP2CONbits.DC2B0=(pos)&(0b1);
   961                           
   962                           ;incstack = 0
   963                           ; Regs used in _servo: [wreg+status,2+status,0]
   964  01DE  0879               	movf	_pos,w
   965  01DF  3901               	andlw	1
   966  01E0  1283               	bcf	3,5	;RP0=0, select bank0
   967  01E1  1303               	bcf	3,6	;RP1=0, select bank0
   968  01E2  00A0               	movwf	??_servo
   969  01E3  0EA0               	swapf	??_servo,f
   970  01E4  081D               	movf	29,w	;volatile
   971  01E5  0620               	xorwf	??_servo,w
   972  01E6  39EF               	andlw	-17
   973  01E7  0620               	xorwf	??_servo,w
   974  01E8  009D               	movwf	29	;volatile
   975                           
   976                           ;picMotores.c: 111: CCP2CONbits.DC2B1=(pos>>1)&(0b1);
   977  01E9  0879               	movf	_pos,w
   978  01EA  00A0               	movwf	??_servo
   979  01EB  1003               	clrc
   980  01EC  0C20               	rrf	??_servo,w
   981  01ED  3901               	andlw	1
   982  01EE  00A1               	movwf	??_servo+1
   983  01EF  0EA1               	swapf	??_servo+1,f
   984  01F0  0DA1               	rlf	??_servo+1,f
   985  01F1  081D               	movf	29,w	;volatile
   986  01F2  0621               	xorwf	??_servo+1,w
   987  01F3  39DF               	andlw	-33
   988  01F4  0621               	xorwf	??_servo+1,w
   989  01F5  009D               	movwf	29	;volatile
   990                           
   991                           ;picMotores.c: 112: CCPR2L=(pos>>2);
   992  01F6  0879               	movf	_pos,w
   993  01F7  00A0               	movwf	??_servo
   994  01F8  3002               	movlw	2
   995  01F9                     u525:	
   996  01F9  1003               	clrc
   997  01FA  0CA0               	rrf	??_servo,f
   998  01FB  3EFF               	addlw	-1
   999  01FC  1D03               	skipz
  1000  01FD  29F9               	goto	u525
  1001  01FE  0820               	movf	??_servo,w
  1002  01FF  009B               	movwf	27	;volatile
  1003  0200  0008               	return
  1004  0201                     __end_of_servo:	
  1005                           ;picMotores.c: 113: return;
  1006                           
  1007                           
  1008                           	psect	text4
  1009  0175                     __ptext4:	
  1010 ;; *************** function _move_pwmDC *****************
  1011 ;; Defined at:
  1012 ;;		line 96 in file "picMotores.c"
  1013 ;; Parameters:    Size  Location     Type
  1014 ;;		None
  1015 ;; Auto vars:     Size  Location     Type
  1016 ;;		None
  1017 ;; Return value:  Size  Location     Type
  1018 ;;                  1    wreg      void 
  1019 ;; Registers used:
  1020 ;;		wreg, status,2, status,0, pclath, cstack
  1021 ;; Tracked objects:
  1022 ;;		On entry : 0/0
  1023 ;;		On exit  : 0/0
  1024 ;;		Unchanged: 0/0
  1025 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1026 ;;      Params:         0       0       0       0       0
  1027 ;;      Locals:         0       0       0       0       0
  1028 ;;      Temps:          0       2       0       0       0
  1029 ;;      Totals:         0       2       0       0       0
  1030 ;;Total ram usage:        2 bytes
  1031 ;; Hardware stack levels used:    1
  1032 ;; Hardware stack levels required when called:    2
  1033 ;; This function calls:
  1034 ;;		_calibracion_presion
  1035 ;;		_medicion_presion
  1036 ;; This function is called by:
  1037 ;;		_main
  1038 ;; This function uses a non-reentrant model
  1039 ;;
  1040                           
  1041                           
  1042                           ;psect for function _move_pwmDC
  1043  0175                     _move_pwmDC:	
  1044                           
  1045                           ;picMotores.c: 97: CCP1CON=0b00001100;
  1046                           
  1047                           ;incstack = 0
  1048                           ; Regs used in _move_pwmDC: [wreg+status,2+status,0+pclath+cstack]
  1049  0175  300C               	movlw	12
  1050  0176  1283               	bcf	3,5	;RP0=0, select bank0
  1051  0177  1303               	bcf	3,6	;RP1=0, select bank0
  1052  0178  0097               	movwf	23	;volatile
  1053                           
  1054                           ;picMotores.c: 98: CCP1CONbits.DC1B0=(vel)&(0b1);
  1055  0179  082C               	movf	_vel,w
  1056  017A  3901               	andlw	1
  1057  017B  00A5               	movwf	??_move_pwmDC
  1058  017C  0EA5               	swapf	??_move_pwmDC,f
  1059  017D  0817               	movf	23,w	;volatile
  1060  017E  0625               	xorwf	??_move_pwmDC,w
  1061  017F  39EF               	andlw	-17
  1062  0180  0625               	xorwf	??_move_pwmDC,w
  1063  0181  0097               	movwf	23	;volatile
  1064                           
  1065                           ;picMotores.c: 99: CCP1CONbits.DC1B1=(vel>>1)&(0b1);
  1066  0182  082C               	movf	_vel,w
  1067  0183  00A5               	movwf	??_move_pwmDC
  1068  0184  1003               	clrc
  1069  0185  0C25               	rrf	??_move_pwmDC,w
  1070  0186  3901               	andlw	1
  1071  0187  00A6               	movwf	??_move_pwmDC+1
  1072  0188  0EA6               	swapf	??_move_pwmDC+1,f
  1073  0189  0DA6               	rlf	??_move_pwmDC+1,f
  1074  018A  0817               	movf	23,w	;volatile
  1075  018B  0626               	xorwf	??_move_pwmDC+1,w
  1076  018C  39DF               	andlw	-33
  1077  018D  0626               	xorwf	??_move_pwmDC+1,w
  1078  018E  0097               	movwf	23	;volatile
  1079                           
  1080                           ;picMotores.c: 100: CCPR1L=(vel>>2);
  1081  018F  082C               	movf	_vel,w
  1082  0190  00A5               	movwf	??_move_pwmDC
  1083  0191  3002               	movlw	2
  1084  0192                     u545:	
  1085  0192  1003               	clrc
  1086  0193  0CA5               	rrf	??_move_pwmDC,f
  1087  0194  3EFF               	addlw	-1
  1088  0195  1D03               	skipz
  1089  0196  2992               	goto	u545
  1090  0197  0825               	movf	??_move_pwmDC,w
  1091  0198  0095               	movwf	21	;volatile
  1092                           
  1093                           ;picMotores.c: 101: calibracion_presion();
  1094  0199  120A  118A  221A  120A  118A  	fcall	_calibracion_presion
  1095  019E                     l1004:	
  1096                           ;picMotores.c: 102: while (medicion_presion()!=1){
  1097                           
  1098  019E  120A  118A  21B6  120A  118A  	fcall	_medicion_presion
  1099  01A3  3A01               	xorlw	1
  1100  01A4  1903               	btfsc	3,2
  1101  01A5  29B1               	goto	l1006
  1102                           
  1103                           ;picMotores.c: 103: _delay((unsigned long)((500)*(500000/4000.0)));}
  1104  01A6  3052               	movlw	82
  1105  01A7  1283               	bcf	3,5	;RP0=0, select bank0
  1106  01A8  1303               	bcf	3,6	;RP1=0, select bank0
  1107  01A9  00A6               	movwf	??_move_pwmDC+1
  1108  01AA  3029               	movlw	41
  1109  01AB  00A5               	movwf	??_move_pwmDC
  1110  01AC                     u837:	
  1111  01AC  0BA5               	decfsz	??_move_pwmDC,f
  1112  01AD  29AC               	goto	u837
  1113  01AE  0BA6               	decfsz	??_move_pwmDC+1,f
  1114  01AF  29AC               	goto	u837
  1115  01B0  299E               	goto	l1004
  1116  01B1                     l1006:	
  1117                           
  1118                           ;picMotores.c: 104: CCP1CON=0;
  1119  01B1  1283               	bcf	3,5	;RP0=0, select bank0
  1120  01B2  1303               	bcf	3,6	;RP1=0, select bank0
  1121  01B3  0197               	clrf	23	;volatile
  1122                           
  1123                           ;picMotores.c: 105: PORTCbits.RC2=0;
  1124  01B4  1107               	bcf	7,2	;volatile
  1125  01B5  0008               	return
  1126  01B6                     __end_of_move_pwmDC:	
  1127                           ;picMotores.c: 106: return;
  1128                           
  1129                           
  1130                           	psect	text5
  1131  01B6                     __ptext5:	
  1132 ;; *************** function _medicion_presion *****************
  1133 ;; Defined at:
  1134 ;;		line 31 in file "picMotores.c"
  1135 ;; Parameters:    Size  Location     Type
  1136 ;;		None
  1137 ;; Auto vars:     Size  Location     Type
  1138 ;;  objeto          1    4[BANK0 ] unsigned char 
  1139 ;;  numero          1    3[BANK0 ] unsigned char 
  1140 ;; Return value:  Size  Location     Type
  1141 ;;                  1    wreg      unsigned char 
  1142 ;; Registers used:
  1143 ;;		wreg, status,2
  1144 ;; Tracked objects:
  1145 ;;		On entry : 0/0
  1146 ;;		On exit  : 0/0
  1147 ;;		Unchanged: 0/0
  1148 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1149 ;;      Params:         0       0       0       0       0
  1150 ;;      Locals:         0       2       0       0       0
  1151 ;;      Temps:          0       3       0       0       0
  1152 ;;      Totals:         0       5       0       0       0
  1153 ;;Total ram usage:        5 bytes
  1154 ;; Hardware stack levels used:    1
  1155 ;; Hardware stack levels required when called:    1
  1156 ;; This function calls:
  1157 ;;		Nothing
  1158 ;; This function is called by:
  1159 ;;		_move_pwmDC
  1160 ;;		_main
  1161 ;; This function uses a non-reentrant model
  1162 ;;
  1163                           
  1164                           
  1165                           ;psect for function _medicion_presion
  1166  01B6                     _medicion_presion:	
  1167                           
  1168                           ;picMotores.c: 32: char numero=0;
  1169                           
  1170                           ;incstack = 0
  1171                           ; Regs used in _medicion_presion: [wreg+status,2]
  1172  01B6  1283               	bcf	3,5	;RP0=0, select bank0
  1173  01B7  1303               	bcf	3,6	;RP1=0, select bank0
  1174  01B8  01A3               	clrf	medicion_presion@numero
  1175                           
  1176                           ;picMotores.c: 33: char objeto=0;
  1177  01B9  01A4               	clrf	medicion_presion@objeto
  1178                           
  1179                           ;picMotores.c: 34: ADCON0bits.GO=1;
  1180  01BA  149F               	bsf	31,1	;volatile
  1181  01BB                     l86:	
  1182                           ;picMotores.c: 35: while(PIR1bits.ADIF==0){
  1183                           
  1184                           
  1185                           ;picMotores.c: 36: _delay((unsigned long)((1)*(500000/4000000.0)));
  1186  01BB  1283               	bcf	3,5	;RP0=0, select bank0
  1187  01BC  1303               	bcf	3,6	;RP1=0, select bank0
  1188  01BD  1F0C               	btfss	12,6	;volatile
  1189  01BE  29BB               	goto	l86
  1190                           
  1191                           ;picMotores.c: 37: }
  1192                           ;picMotores.c: 38: PIR1bits.ADIF=0;
  1193  01BF  130C               	bcf	12,6	;volatile
  1194                           
  1195                           ;picMotores.c: 39: numero=ADRESH;
  1196  01C0  081E               	movf	30,w	;volatile
  1197  01C1  00A0               	movwf	??_medicion_presion
  1198  01C2  0820               	movf	??_medicion_presion,w
  1199  01C3  00A3               	movwf	medicion_presion@numero
  1200                           
  1201                           ;picMotores.c: 40: if (numero > (presion_zero+3)){
  1202  01C4  082A               	movf	_presion_zero,w
  1203  01C5  3E03               	addlw	3
  1204  01C6  00A0               	movwf	??_medicion_presion
  1205  01C7  3000               	movlw	0
  1206  01C8  1803               	skipnc
  1207  01C9  3001               	movlw	1
  1208  01CA  00A1               	movwf	??_medicion_presion+1
  1209  01CB  0821               	movf	??_medicion_presion+1,w
  1210  01CC  3A80               	xorlw	128
  1211  01CD  00A2               	movwf	??_medicion_presion+2
  1212  01CE  3080               	movlw	128
  1213  01CF  0222               	subwf	??_medicion_presion+2,w
  1214  01D0  1D03               	skipz
  1215  01D1  29D4               	goto	u505
  1216  01D2  0823               	movf	medicion_presion@numero,w
  1217  01D3  0220               	subwf	??_medicion_presion,w
  1218  01D4                     u505:	
  1219  01D4  1803               	skipnc
  1220  01D5  29DA               	goto	l968
  1221                           
  1222                           ;picMotores.c: 41: objeto = 1;
  1223  01D6  1283               	bcf	3,5	;RP0=0, select bank0
  1224  01D7  1303               	bcf	3,6	;RP1=0, select bank0
  1225  01D8  01A4               	clrf	medicion_presion@objeto
  1226  01D9  0AA4               	incf	medicion_presion@objeto,f
  1227  01DA                     l968:	
  1228                           
  1229                           ;picMotores.c: 42: }
  1230                           ;picMotores.c: 43: return objeto;
  1231  01DA  1283               	bcf	3,5	;RP0=0, select bank0
  1232  01DB  1303               	bcf	3,6	;RP1=0, select bank0
  1233  01DC  0824               	movf	medicion_presion@objeto,w
  1234  01DD  0008               	return
  1235  01DE                     __end_of_medicion_presion:	
  1236                           
  1237                           	psect	text6
  1238  021A                     __ptext6:	
  1239 ;; *************** function _calibracion_presion *****************
  1240 ;; Defined at:
  1241 ;;		line 46 in file "picMotores.c"
  1242 ;; Parameters:    Size  Location     Type
  1243 ;;		None
  1244 ;; Auto vars:     Size  Location     Type
  1245 ;;  numero          1    1[BANK0 ] unsigned char 
  1246 ;; Return value:  Size  Location     Type
  1247 ;;                  1    wreg      void 
  1248 ;; Registers used:
  1249 ;;		wreg, status,2
  1250 ;; Tracked objects:
  1251 ;;		On entry : 0/0
  1252 ;;		On exit  : 0/0
  1253 ;;		Unchanged: 0/0
  1254 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1255 ;;      Params:         0       0       0       0       0
  1256 ;;      Locals:         0       1       0       0       0
  1257 ;;      Temps:          0       1       0       0       0
  1258 ;;      Totals:         0       2       0       0       0
  1259 ;;Total ram usage:        2 bytes
  1260 ;; Hardware stack levels used:    1
  1261 ;; Hardware stack levels required when called:    1
  1262 ;; This function calls:
  1263 ;;		Nothing
  1264 ;; This function is called by:
  1265 ;;		_move_pwmDC
  1266 ;;		_main
  1267 ;; This function uses a non-reentrant model
  1268 ;;
  1269                           
  1270                           
  1271                           ;psect for function _calibracion_presion
  1272  021A                     _calibracion_presion:	
  1273                           
  1274                           ;picMotores.c: 47: char numero=0;
  1275                           
  1276                           ;incstack = 0
  1277                           ; Regs used in _calibracion_presion: [wreg+status,2]
  1278  021A  1283               	bcf	3,5	;RP0=0, select bank0
  1279  021B  1303               	bcf	3,6	;RP1=0, select bank0
  1280  021C  01A1               	clrf	calibracion_presion@numero
  1281                           
  1282                           ;picMotores.c: 48: ADCON0bits.GO=1;
  1283  021D  149F               	bsf	31,1	;volatile
  1284  021E                     l93:	
  1285                           ;picMotores.c: 49: while(PIR1bits.ADIF==0){
  1286                           
  1287                           
  1288                           ;picMotores.c: 50: _delay((unsigned long)((1)*(500000/4000000.0)));
  1289  021E  1283               	bcf	3,5	;RP0=0, select bank0
  1290  021F  1303               	bcf	3,6	;RP1=0, select bank0
  1291  0220  1F0C               	btfss	12,6	;volatile
  1292  0221  2A1E               	goto	l93
  1293                           
  1294                           ;picMotores.c: 51: }
  1295                           ;picMotores.c: 52: PIR1bits.ADIF=0;
  1296  0222  130C               	bcf	12,6	;volatile
  1297                           
  1298                           ;picMotores.c: 53: numero=ADRESH;
  1299  0223  081E               	movf	30,w	;volatile
  1300  0224  00A0               	movwf	??_calibracion_presion
  1301  0225  0820               	movf	??_calibracion_presion,w
  1302  0226  00A1               	movwf	calibracion_presion@numero
  1303                           
  1304                           ;picMotores.c: 54: presion_zero=numero;
  1305  0227  0821               	movf	calibracion_presion@numero,w
  1306  0228  00A0               	movwf	??_calibracion_presion
  1307  0229  0820               	movf	??_calibracion_presion,w
  1308  022A  00AA               	movwf	_presion_zero
  1309                           
  1310                           ;picMotores.c: 55: PORTD=numero;
  1311  022B  0821               	movf	calibracion_presion@numero,w
  1312  022C  0088               	movwf	8	;volatile
  1313  022D  0008               	return
  1314  022E                     __end_of_calibracion_presion:	
  1315                           ;picMotores.c: 56: return;
  1316                           
  1317                           
  1318                           	psect	text7
  1319  0201                     __ptext7:	
  1320 ;; *************** function _ISR *****************
  1321 ;; Defined at:
  1322 ;;		line 139 in file "picMotores.c"
  1323 ;; Parameters:    Size  Location     Type
  1324 ;;		None
  1325 ;; Auto vars:     Size  Location     Type
  1326 ;;		None
  1327 ;; Return value:  Size  Location     Type
  1328 ;;                  1    wreg      void 
  1329 ;; Registers used:
  1330 ;;		wreg
  1331 ;; Tracked objects:
  1332 ;;		On entry : 0/0
  1333 ;;		On exit  : 0/0
  1334 ;;		Unchanged: 0/0
  1335 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1336 ;;      Params:         0       0       0       0       0
  1337 ;;      Locals:         0       0       0       0       0
  1338 ;;      Temps:          5       0       0       0       0
  1339 ;;      Totals:         5       0       0       0       0
  1340 ;;Total ram usage:        5 bytes
  1341 ;; Hardware stack levels used:    1
  1342 ;; This function calls:
  1343 ;;		Nothing
  1344 ;; This function is called by:
  1345 ;;		Interrupt level 1
  1346 ;; This function uses a non-reentrant model
  1347 ;;
  1348                           
  1349                           
  1350                           ;psect for function _ISR
  1351  0201                     _ISR:	
  1352                           
  1353                           ;picMotores.c: 140: if (PIR1bits.ADIF==1){
  1354  0201  1F0C               	btfss	12,6	;volatile
  1355  0202  2A0F               	goto	i1l124
  1356                           
  1357                           ;picMotores.c: 141: PIR1bits.ADIF=0;
  1358  0203  130C               	bcf	12,6	;volatile
  1359                           
  1360                           ;picMotores.c: 143: ADC=ADRESH;
  1361  0204  081E               	movf	30,w	;volatile
  1362  0205  00F0               	movwf	??_ISR
  1363  0206  0870               	movf	??_ISR,w
  1364  0207  00AB               	movwf	_ADC
  1365                           
  1366                           ;picMotores.c: 144: _delay((unsigned long)((2)*(500000/4000.0)));
  1367  0208  3053               	movlw	83
  1368  0209  00F0               	movwf	??_ISR
  1369  020A                     u84_27:	
  1370  020A  0BF0               	decfsz	??_ISR,f
  1371  020B  2A0A               	goto	u84_27
  1372                           
  1373                           ;picMotores.c: 145: ADCON0bits.GO=1;
  1374  020C  1283               	bcf	3,5	;RP0=0, select bank0
  1375  020D  1303               	bcf	3,6	;RP1=0, select bank0
  1376  020E  149F               	bsf	31,1	;volatile
  1377  020F                     i1l124:	
  1378                           ;picMotores.c: 146: }
  1379                           ;picMotores.c: 147: return;
  1380                           
  1381  020F  0874               	movf	??_ISR+4,w
  1382  0210  00FF               	movwf	127
  1383  0211  0873               	movf	??_ISR+3,w
  1384  0212  008A               	movwf	10
  1385  0213  0872               	movf	??_ISR+2,w
  1386  0214  0084               	movwf	4
  1387  0215  0E71               	swapf	(??_ISR+1)^(0+-128),w
  1388  0216  0083               	movwf	3
  1389  0217  0EFE               	swapf	126,f
  1390  0218  0E7E               	swapf	126,w
  1391  0219  0009               	retfie
  1392  021A                     __end_of_ISR:	
  1393  007E                     btemp	set	126	;btemp
  1394  007E                     wtemp0	set	126
  1395                           
  1396                           	psect	intentry
  1397  0004                     __pintentry:	
  1398                           ;incstack = 0
  1399                           ; Regs used in _ISR: [wreg]
  1400                           
  1401  0004                     interrupt_function:	
  1402  007E                     saved_w	set	btemp
  1403  0004  00FE               	movwf	btemp
  1404  0005  0E03               	swapf	3,w
  1405  0006  00F1               	movwf	??_ISR+1
  1406  0007  0804               	movf	4,w
  1407  0008  00F2               	movwf	??_ISR+2
  1408  0009  080A               	movf	10,w
  1409  000A  00F3               	movwf	??_ISR+3
  1410  000B  1283               	bcf	3,5	;RP0=0, select bank0
  1411  000C  1303               	bcf	3,6	;RP1=0, select bank0
  1412  000D  087F               	movf	btemp+1,w
  1413  000E  00F4               	movwf	??_ISR+4
  1414  000F  120A  118A  2A01   	ljmp	_ISR


Data Sizes:
    Strings     0
    Constant    0
    Data        2
    BSS         6
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      5      10
    BANK0            80     10      13
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_move_pwmDC
    _move_servo->_servo
    _move_pwmDC->_medicion_presion

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0     308
                                              7 BANK0      3     3      0
                _calibracion_presion
                   _medicion_presion
                         _move_pwmDC
                         _move_servo
                              _servo
                            _stepper
 ---------------------------------------------------------------------------------
 (1) _stepper                                              3     3      0      24
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _move_servo                                           2     2      0       0
                                              2 BANK0      2     2      0
                              _servo
 ---------------------------------------------------------------------------------
 (1) _servo                                                2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _move_pwmDC                                           2     2      0     142
                                              5 BANK0      2     2      0
                _calibracion_presion
                   _medicion_presion
 ---------------------------------------------------------------------------------
 (2) _medicion_presion                                     5     5      0      74
                                              0 BANK0      5     5      0
 ---------------------------------------------------------------------------------
 (2) _calibracion_presion                                  2     2      0      68
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (3) _ISR                                                  5     5      0       0
                                              0 COMMON     5     5      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _calibracion_presion
   _medicion_presion
   _move_pwmDC
     _calibracion_presion
     _medicion_presion
   _move_servo
     _servo
   _servo
   _stepper

 _ISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0       0       9        0.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0       0       7        0.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50      A       D       5       16.3%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      5       A       1       71.4%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      17      12        0.0%
ABS                  0      0      17       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V1.41 build -162212810 
Symbol Table                                                                                   Thu Jun 01 02:03:46 2017

                 __CFG_CP$OFF 0000                   _SSPSTATbits 0094                            l93 021E  
                          l86 01BB                           _ADC 002B                           l990 00ED  
                         l968 01DA                           _PR2 0092                           u505 01D4  
                __CFG_CPD$OFF 0000                           _ISR 0201                           u525 01F9  
                         u545 0192                           u807 0125                           u817 0143  
                         u827 0164                           u837 01AC                           u757 0068  
                         u767 00AD                           u777 00F8                           u787 0107  
                         u797 0116                           _vel 002C                           _pos 0079  
                         fsr0 0004         ??_calibracion_presion 0020                  __CFG_LVP$OFF 0000  
                        ?_ISR 0070                          l1004 019E                          l1006 01B1  
                        l1110 00A2                          l1120 00B9                          l1112 00A5  
                        l1026 0153                          l1106 009A                          l1132 00CE  
                        l1124 00C1                          l1126 00C4                          l1136 00D5  
                        l1138 00DA                          l1086 0072                          l1098 008D  
                __CFG_WRT$OFF 0000                          _main 0029                          _giro 0077  
                        btemp 007E                          start 0012                 __CFG_IESO$OFF 0000  
               __CFG_MCLRE$ON 0000                         ??_ISR 0070                         ?_main 0070  
               __CFG_WDTE$OFF 0000                         _ANSEL 0188                         _T2CON 0012  
                       i1l124 020F                         _PORTA 0005                         _PORTB 0006  
                       _PORTD 0008                         _TRISA 0085                         _TRISB 0086  
                       _TRISC 0087                         _TRISD 0088                         u84_27 020A  
              __CFG_FCMEN$OFF 0000                         _servo 01DE                __CFG_BOREN$OFF 0000  
                       pclath 000A                         status 0003               __end_of_stepper 012F  
                       wtemp0 007E               __initialization 0015                  __end_of_main 00E7  
                      ??_main 0027                        _ADCON0 001F                        _ADCON1 009F  
    __end_of_medicion_presion 01DE                        _ADRESH 001E                        _ADRESL 009E  
                      _CCPR1L 0015                        _CCPR2L 001B                        ?_servo 0070  
                      _ANSELH 0189                        _OSCCON 008F                        _SSPCON 0014  
                      _SSPBUF 0013                __CFG_PWRTE$OFF 0000                        _accion 0076  
                      _puerta 0078                  __pdataCOMMON 0079                        saved_w 007E  
                   ??_stepper 0020       __end_of__initialization 0025     calibracion_presion@numero 0021  
              __pcstackCOMMON 0070                  __pidataBANK0 022F                 __end_of_servo 0201  
                     ??_servo 0020                    __pbssBANK0 002A                    __pmaintext 0029  
                  __pintentry 0004                       _CCP1CON 0017                       _CCP2CON 001D  
 __end_of_calibracion_presion 022E                       _SSPSTAT 0094                     _ANSELbits 0188  
                     __ptext1 00E7                       __ptext2 012F                       __ptext3 01DE  
                     __ptext4 0175                       __ptext5 01B6                       __ptext6 021A  
                     __ptext7 0201                  __size_of_ISR 0019                       _presion 0075  
                     _stepper 00E7             ?_medicion_presion 0070          end_of_initialization 0025  
          ??_medicion_presion 0020                    _move_pwmDC 0175                    _move_servo 012F  
                   _PORTCbits 0007        medicion_presion@objeto 0024        medicion_presion@numero 0023  
                 _CCP1CONbits 0017                   _CCP2CONbits 001D                 __pidataCOMMON 022E  
         start_initialization 0015                   __end_of_ISR 021A      __CFG_FOSC$INTRC_NOCLKOUT 0000  
                 ?_move_pwmDC 0070                   ?_move_servo 0070                   __pdataBANK0 002C  
                 __pbssCOMMON 0075                     ___latbits 0002                 __pcstackBANK0 0020  
         __size_of_move_pwmDC 0041           __size_of_move_servo 0046                      ?_stepper 0070  
__size_of_calibracion_presion 0014                __size_of_servo 0023             interrupt_function 0004  
                    _PIE1bits 008C                      _PIR1bits 000C     __size_of_medicion_presion 0028  
                  _ADCON0bits 001F             __CFG_BOR4V$BOR40V 0000              __size_of_stepper 0048  
               __size_of_main 00BE                  ??_move_pwmDC 0025                  ??_move_servo 0022  
                  _INTCONbits 000B            __end_of_move_pwmDC 01B6            __end_of_move_servo 0175  
                    intlevel1 0000              _medicion_presion 01B6           _calibracion_presion 021A  
                _presion_zero 002A                      stepper@i 0022          ?_calibracion_presion 0070  
